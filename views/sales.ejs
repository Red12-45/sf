<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Sales Report - Filtered</title>
  <!-- Font Awesome for Icons -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <!-- Sales CSS -->
  <link rel="stylesheet" href="/css/sales.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <style>
    /* Inline‐editing styles */
    td.editable, td.editable-status { position: relative; cursor: pointer; }
    td.editable .edit-icon,
    td.editable-status .edit-icon {
      display: none;
      position: absolute;
      right: 6px; top: 50%;
      transform: translateY(-50%);
      font-size: 0.9em; color: #555;
    }
    td.editable:hover .edit-icon,
    td.editable-status:hover .edit-icon { display: inline; }
    td.editable.editing, td.editable-status.editing { padding: 0; }
    td.editable.editing input,
    td.editable-status.editing select,
    td.editable-status.editing input {
      width: 100%; border: none; padding: 4px;
      box-sizing: border-box; font-size: inherit;
    }
    /* Detail input style */
    td.editable-status .status-input {
      width: 45%; margin-right: 4%; padding: 2px; box-sizing: border-box;
      font-size: inherit;
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <div class="sidebar" id="sidebar">
    <div class="sidebar-logo">
      <i class="fas fa-chart-line"></i>
      <span>Sales Report</span>
    </div>
    <div class="sidebar-nav">
      <div class="sidebar-section">
        <div class="sidebar-heading">Dashboard</div>
        <ul class="sidebar-menu">
          <li class="sidebar-item"><a href="/" class="sidebar-link"><i class="fas fa-home"></i> Dashboard</a></li>
          <li class="sidebar-item"><a href="/sales" class="sidebar-link active"><i class="fas fa-shopping-cart"></i> Sales Report</a></li>
          <li class="sidebar-item"><a href="/profit" class="sidebar-link"><i class="fas fa-chart-bar"></i> Profit Report</a></li>
          <li class="sidebar-item"><a href="/expense" class="sidebar-link"><i class="fas fa-money-bill-wave"></i> Expenses</a></li>
        </ul>
      </div>
      <div class="sidebar-section">
        <div class="sidebar-heading">Products</div>
        <ul class="sidebar-menu">
          <li class="sidebar-item"><a href="/add-product" class="sidebar-link"><i class="fas fa-plus-circle"></i> Add New Product</a></li>
          <li class="sidebar-item"><a href="/view-products" class="sidebar-link"><i class="fas fa-boxes"></i> View/Edit Products</a></li>
        </ul>
      </div>
      <div class="sidebar-section">
        <div class="sidebar-heading">Settings</div>
        <ul class="sidebar-menu">
          <li class="sidebar-item"><a href="/profile" class="sidebar-link"><i class="fas fa-user"></i> Profile</a></li>
          <li class="sidebar-item"><a href="/logout" class="sidebar-link"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
        </ul>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content" id="main-content">
    <div class="page-container">

      <!-- Filter Form -->
      <div class="formBox filter-form">
        <h2><i class="fas fa-filter"></i> Filter Sales</h2>
        <form action="/sales" method="GET" class="form-inline">
          <div class="form-field">
            <label for="saleDate">Sale Date:</label>
            <input type="date" id="saleDate" name="saleDate" value="<%= saleDate %>">
          </div>
          <div class="form-field">
            <label for="month">Month (YYYY-MM):</label>
            <input type="month" id="month" name="month" value="<%= month %>">
          </div>
          <div class="form-field">
            <label for="status">Sale Status:</label>
            <select id="status" name="status">
              <option value="All" <%= status==='All'?'selected':'' %>>All</option>
              <option value="Paid Cash" <%= status==='Paid Cash'?'selected':'' %>>Paid Cash</option>
              <option value="Paid Online" <%= status==='Paid Online'?'selected':'' %>>Paid Online</option>
              <option value="Not Paid" <%= status==='Not Paid'?'selected':'' %>>Not Paid</option>
              <option value="Half Cash + Half Online" <%= status==='Half Cash + Half Online'?'selected':'' %>>Half Cash + Half Online</option>
              <option value="Half Cash + Not Paid" <%= status==='Half Cash + Not Paid'?'selected':'' %>>Half Cash + Not Paid</option>
              <option value="Half Online + Not Paid" <%= status==='Half Online + Not Paid'?'selected':'' %>>Half Online + Not Paid</option>
            </select>
          </div>
          <button type="submit"><i class="fas fa-search"></i> Filter</button>
        </form>
      </div>

      <!-- Grouped Sales & Expenses -->
      <div class="sales-report">
        <% 
          const groupedSales = {}, groupedExpenses = {};
          sales.forEach(s => (groupedSales[s.saleDate] = groupedSales[s.saleDate]||[]).push(s));
          expenses.forEach(e => (groupedExpenses[e.saleDate] = groupedExpenses[e.saleDate]||[]).push(e));
          const allDates = Array.from(new Set([...Object.keys(groupedSales), ...Object.keys(groupedExpenses)])).sort();
        %>

        <% if (!allDates.length) { %>
          <div class="formBox"><p>No data found for the selected filters.</p></div>
        <% } else { %>
          <% allDates.forEach(date => { 
               const daySales = groupedSales[date]||[];
               const dayExps  = groupedExpenses[date]||[];
          %>
          <div class="date-group">
            <h2>Sales for <%= date %>
              <% if (daySales[0]?.openingBalance!==undefined) { %>
                (Opening Balance: ₹<%= parseFloat(daySales[0].openingBalance).toFixed(2) %>)
              <% } %>
            </h2>
            <div class="time-info-container">
              <% if (openingTimes[date]?.openingTime) { %>
                <span class="time-info"><i class="far fa-clock"></i> Opening: <%= openingTimes[date].openingTime %></span>
              <% } %>
              <% if (openingTimes[date]?.closingTime) { %>
                <span class="time-info"><i class="far fa-clock"></i> Closing: <%= openingTimes[date].closingTime %></span>
              <% } %>
            </div>

            <!-- Sales Table -->
            <% if (daySales.length) { %>
            <table>
              <thead>
                <tr>
                  <th>Product Name</th>
                  <th>Wholesale Price</th>
                  <th>Retail Price</th>
                  <th>Quantity</th>
                  <th>Unit</th>
                  <th>Total Sale</th>
                  <th>Profit/Unit</th>
                  <th>Total Profit</th>
                  <th>Status</th>
                  <th>Opening Balance</th>
                  <th>Extra Info</th>
                  <th>Time</th>
                  <th style="text-align:center;">Action</th>
                </tr>
              </thead>
              <tbody>
                <% daySales.forEach(sale => {
                     const tot = sale.totalSale || (sale.retailPrice * sale.saleQuantity);
                %>
                <tr>
                  <td data-field="productName"><%= sale.productName %></td>
                  <td data-field="wholesalePrice"><%= parseFloat(sale.wholesalePrice).toFixed(2) %></td>

                  <!-- Retail Price inline edit -->
                  <td class="editable" data-id="<%= sale.id %>" data-field="retailPrice" data-date="<%= date %>">
                    <span class="value"><%= parseFloat(sale.retailPrice).toFixed(2) %></span>
                    <i class="fas fa-edit edit-icon"></i>
                  </td>

                  <!-- Quantity inline edit -->
                  <td class="editable" data-id="<%= sale.id %>" data-field="saleQuantity" data-date="<%= date %>">
                    <span class="value"><%= sale.saleQuantity %></span>
                    <i class="fas fa-edit edit-icon"></i>
                  </td>

                  <td><%= sale.unit||'-' %></td>
                  <td data-field="totalSale"><%= tot.toFixed(2) %></td>
                  <td data-field="profitPerUnit"><%= parseFloat(sale.profitPerUnit).toFixed(2) %></td>
                  <td data-field="profit"><%= parseFloat(sale.profit).toFixed(2) %></td>

                  <!-- Status inline edit with data-detail attributes -->
                  <td class="editable-status" 
                      data-id="<%= sale.id %>" 
                      data-field="status" 
                      data-date="<%= date %>"
                      data-detail1="<%= sale.paymentDetail1||'' %>"
                      data-detail2="<%= sale.paymentDetail2||'' %>">
                    <span class="value"><%= sale.status %>
                      <% if (sale.paymentDetail1 || sale.paymentDetail2) { %><br><small>
                        <% if (sale.paymentDetail1) { %>Detail1: <%= parseFloat(sale.paymentDetail1).toFixed(2) %><% } %>
                        <% if (sale.paymentDetail2) { %>
                          <% if (sale.paymentDetail1) { %>, <% } %>
                          Detail2: <%= parseFloat(sale.paymentDetail2).toFixed(2) %>
                        <% } %>
                      </small><% } %>
                    </span>
                    <i class="fas fa-edit edit-icon"></i>
                  </td>

                  <td><%= sale.openingBalance %></td>
                  <td><%= sale.extraInfo||'-' %></td>
                  <td><%= (sale.createdAt?.toDate ? sale.createdAt.toDate() : new Date(sale.createdAt)).toLocaleTimeString() %></td>
                  <td style="text-align:center;">
                    <i class="fas fa-trash-alt delete-sale-btn" data-id="<%= sale.id %>" data-date="<%= date %>"></i>
                  </td>
                </tr>
                <% }); %>
              </tbody>
            </table>
            <% } else { %>
              <p>No sales found for <%= date %>.</p>
            <% } %>

            <!-- Expenses Table -->
            <h2>Expenses for <%= date %>
              <% if (dayExps.length) {
                   const sumExp = dayExps.reduce((a,e)=>a+parseFloat(e.expenseCost||0),0);
              %> (₹<%= sumExp.toFixed(2) %>)<% } %>
            </h2>
            <% if (dayExps.length) { %>
            <table>
              <thead>
                <tr>
                  <th>Reason</th>
                  <th>Cost</th>
                  <th>Method</th>
                  <th>Detail 1</th>
                  <th>Detail 2</th>
                  <th>Time</th>
                  <th style="text-align:center;">Action</th>
                </tr>
              </thead>
              <tbody>
                <% dayExps.forEach(exp => { %>
                <tr>
                  <td><%= exp.expenseReason %></td>
                  <td><%= parseFloat(exp.expenseCost).toFixed(2) %></td>
                  <td><%= exp.expenseStatus %></td>
                  <td><%= exp.expenseDetail1||'-' %></td>
                  <td><%= exp.expenseDetail2||'-' %></td>
                  <td><%= (exp.createdAt?.toDate ? exp.createdAt.toDate() : new Date(exp.createdAt)).toLocaleTimeString() %></td>
                  <td style="text-align:center;">
                    <i class="fas fa-trash-alt delete-expense-btn" data-id="<%= exp.id %>" data-date="<%= date %>"></i>
                  </td>
                </tr>
                <% }); %>
              </tbody>
            </table>
            <% } else { %>
              <p>No expenses for <%= date %>.</p>
            <% } %>

            <!-- Summary Box -->
            <div class="summaryBox">
              <button class="toggleSummary" data-date="<%= date %>">
                <i class="fas fa-chart-pie"></i> Show Summary
              </button>
              <div class="summaryContent" id="summary_<%= date %>" style="display:none;">
                <% 
                  let tS=0,tP=0,cS=0,oS=0,nS=0,cE=0,oE=0;
                  daySales.forEach(s=>{
                    const amt=s.retailPrice*s.saleQuantity;
                    tS+=amt; tP+=s.profit;
                    switch(s.status){
                      case 'Paid Cash': cS+=amt; break;
                      case 'Paid Online': oS+=amt; break;
                      case 'Not Paid': nS+=amt; break;
                      case 'Half Cash + Half Online':
                        if(s.paymentDetail1) cS+=parseFloat(s.paymentDetail1);
                        if(s.paymentDetail2) oS+=parseFloat(s.paymentDetail2);
                        break;
                      case 'Half Cash + Not Paid':
                        if(s.paymentDetail1) cS+=parseFloat(s.paymentDetail1);
                        if(s.paymentDetail2) nS+=parseFloat(s.paymentDetail2);
                        break;
                      case 'Half Online + Not Paid':
                        if(s.paymentDetail1) oS+=parseFloat(s.paymentDetail1);
                        if(s.paymentDetail2) nS+=parseFloat(s.paymentDetail2);
                        break;
                    }
                  });
                  dayExps.forEach(e=>{
                    switch(e.expenseStatus){
                      case 'Paid Cash': cE+=parseFloat(e.expenseCost); break;
                      case 'Paid Online': oE+=parseFloat(e.expenseCost); break;
                      case 'Half Cash + Half Online':
                        if(e.expenseDetail1) cE+=parseFloat(e.expenseDetail1);
                        if(e.expenseDetail2) oE+=parseFloat(e.expenseDetail2);
                        break;
                      case 'Half Cash + Not Paid':
                        if(e.expenseDetail1) cE+=parseFloat(e.expenseDetail1);
                        break;
                      case 'Half Online + Not Paid':
                        if(e.expenseDetail1) oE+=parseFloat(e.expenseDetail1);
                        break;
                    }
                  });
                  const finalCash=cS-cE;
                %>
                <p data-key="totalSales">Total Sales: <%= tS.toFixed(2) %></p>
                <p data-key="totalProfit">Total Profit: <%= tP.toFixed(2) %></p>
                <p data-key="totalCashSales">Total Cash Sales: <%= cS.toFixed(2) %></p>
                <p data-key="totalOnlineSales">Total Online Sales: <%= oS.toFixed(2) %></p>
                <p data-key="totalNotPaidSales">Total Not Paid Sales: <%= nS.toFixed(2) %></p>
                <p data-key="totalCashExpenses">Total Cash Expenses: <%= cE.toFixed(2) %></p>
                <p data-key="totalOnlineExpenses">Total Online Expenses: <%= oE.toFixed(2) %></p>
                <p data-key="finalCash">Final Cash: <%= finalCash.toFixed(2) %></p>
              </div>
            </div>
          </div>
          <% }); %>
        <% } %>
      </div>

    </div>
  </div>

  <!-- Client‑Side Scripts -->
  <script>
    // Toggle summaries
    document.querySelectorAll('.toggleSummary').forEach(btn=>{
      btn.addEventListener('click', ()=>{
        const date=btn.dataset.date;
        const cont=document.getElementById('summary_'+date);
        if(cont.style.display==='none'){
          cont.style.display='block';
          btn.innerHTML='<i class="fas fa-chart-pie"></i> Hide Summary';
        } else {
          cont.style.display='none';
          btn.innerHTML='<i class="fas fa-chart-pie"></i> Show Summary';
        }
      });
    });

    // Refresh summary values after inline edit or delete
    function refreshSummary(date,s){
      const cont=document.getElementById('summary_'+date);
      ['totalSales','totalProfit','totalCashSales','totalOnlineSales','totalNotPaidSales','totalCashExpenses','totalOnlineExpenses','finalCash']
      .forEach(key=>{
        const p=cont.querySelector(`[data-key="${key}"]`);
        if(p) p.textContent=p.textContent.replace(/[-+]?[0-9]*\.?[0-9]+$/, s[key].toFixed(2));
      });
      cont.style.display='block';
      const btn=document.querySelector(`.toggleSummary[data-date="${date}"]`);
      if(btn) btn.innerHTML='<i class="fas fa-chart-pie"></i> Hide Summary';
    }

    // Inline‑editing handler (extended for status and details)
    document.addEventListener('click', async e => {
      const icon = e.target.closest('.edit-icon');
      if (!icon) return;

      const td = icon.closest('td');
      const id = td.dataset.id;
      const field = td.dataset.field;
      const date = td.dataset.date;
      let oldVal = td.querySelector('.value').firstChild.textContent.trim();
      const oldDetail1 = td.dataset.detail1;
      const oldDetail2 = td.dataset.detail2;

      // Handle status edits with optional detail inputs
      if (field === 'status') {
        const options = [
          'Paid Cash','Paid Online','Not Paid',
          'Half Cash + Half Online',
          'Half Cash + Not Paid',
          'Half Online + Not Paid'
        ];

        td.classList.add('editing');
        td.innerHTML = '';
        const sel = document.createElement('select');
        options.forEach(opt => {
          const o = document.createElement('option');
          o.value = o.text = opt;
          if (opt === oldVal) o.selected = true;
          sel.appendChild(o);
        });
        td.appendChild(sel);

        // Function to render detail inputs if required
        const renderDetailInputs = (statusVal) => {
          td.querySelectorAll('.status-input').forEach(x => x.remove());
          if (['Half Cash + Half Online','Half Cash + Not Paid','Half Online + Not Paid'].includes(statusVal)) {
            const inp1 = document.createElement('input');
            inp1.type = 'number'; inp1.step = '0.01';
            inp1.placeholder = 'Detail 1';
            inp1.value = oldDetail1;
            inp1.className = 'status-input';
            td.appendChild(inp1);

            const inp2 = document.createElement('input');
            inp2.type = 'number'; inp2.step = '0.01';
            inp2.placeholder = 'Detail 2';
            inp2.value = oldDetail2;
            inp2.className = 'status-input';
            td.appendChild(inp2);
          }
        };

        renderDetailInputs(oldVal);

        const finishUpdate = async () => {
          const newStatus = sel.value;
          const detailInputs = td.querySelectorAll('.status-input');
          const newDetail1 = detailInputs[0] ? detailInputs[0].value.trim() : '';
          const newDetail2 = detailInputs[1] ? detailInputs[1].value.trim() : '';
          td.classList.remove('editing');

          if (newStatus !== oldVal || newDetail1 !== oldDetail1 || newDetail2 !== oldDetail2) {
            try {
              const payload = { saleId: id, field: 'status', value: newStatus };
              if (detailInputs.length) {
                payload.paymentDetail1 = newDetail1;
                payload.paymentDetail2 = newDetail2;
              }
              const res = await fetch('/api/edit-sale', {
                method: 'POST',
                headers: {'Content-Type':'application/json'},
                body: JSON.stringify(payload)
              });
              const json = await res.json();
              if (!json.success) throw new Error(json.error||'Update failed');

              td.dataset.detail1 = newDetail1;
              td.dataset.detail2 = newDetail2;

              let html = `<span class="value">${newStatus}`;
              if (detailInputs.length) {
                html += '<br><small>';
                if (newDetail1) html += `Detail1: ${parseFloat(newDetail1).toFixed(2)}`;
                if (newDetail2) html += `${newDetail1?', ':''}Detail2: ${parseFloat(newDetail2).toFixed(2)}`;
                html += '</small>';
              }
              html += `</span><i class="fas fa-edit edit-icon"></i>`;
              td.innerHTML = html;
            } catch(err) {
              alert(err.message);
              let revertHtml = `<span class="value">${oldVal}`;
              if (oldDetail1||oldDetail2) {
                revertHtml += '<br><small>';
                if (oldDetail1) revertHtml += `Detail1: ${parseFloat(oldDetail1).toFixed(2)}`;
                if (oldDetail2) revertHtml += `${oldDetail1?', ':''}Detail2: ${parseFloat(oldDetail2).toFixed(2)}`;
                revertHtml += '</small>';
              }
              revertHtml += `</span><i class="fas fa-edit edit-icon"></i>`;
              td.innerHTML = revertHtml;
            }
          } else {
            let html = `<span class="value">${oldVal}`;
            if (oldDetail1||oldDetail2) {
              html += '<br><small>';
              if (oldDetail1) html += `Detail1: ${parseFloat(oldDetail1).toFixed(2)}`;
              if (oldDetail2) html += `${oldDetail1?', ':''}Detail2: ${parseFloat(oldDetail2).toFixed(2)}`;
              html += '</small>';
            }
            html += `</span><i class="fas fa-edit edit-icon"></i>`;
            td.innerHTML = html;
          }
        };

        sel.addEventListener('change', () => renderDetailInputs(sel.value));
        sel.addEventListener('blur', finishUpdate);
        td.addEventListener('keydown', ev => { if (ev.key==='Enter') finishUpdate(); });
        return;
      }

      // Retail & Quantity inline edit (unchanged)
      if (field==='saleQuantity' || field==='retailPrice') {
        const oldValNumeric = td.querySelector('.value').textContent.trim();
        td.classList.add('editing');
        td.innerHTML = `<input type="${field==='saleQuantity'?'number':'text'}" value="${oldValNumeric}">`;
        const input = td.querySelector('input');
        input.focus(); input.select();

        const finishNumeric = async () => {
          const newVal = input.value.trim();
          td.classList.remove('editing');
          if (newVal !== oldValNumeric) {
            try {
              const res = await fetch('/api/edit-sale', {
                method:'POST',
                headers:{'Content-Type':'application/json'},
                body:JSON.stringify({saleId:id,field,value:newVal})
              });
              const json = await res.json();
              if (!json.success) throw new Error(json.error||'Update failed');

              td.innerHTML = `<span class="value">${
                field==='saleQuantity'
                  ? parseInt(json.updatedRow[field],10)
                  : parseFloat(json.updatedRow[field]).toFixed(2)
              }</span><i class="fas fa-edit edit-icon"></i>`;

              const tr = td.closest('tr');
              ['productName','wholesalePrice','totalSale','profitPerUnit','profit'].forEach(fld => {
                if (json.updatedRow[fld] !== undefined) {
                  const td2 = tr.querySelector(`td[data-field="${fld}"]`);
                  td2.textContent = (
                    fld==='wholesalePrice'||fld==='totalSale'||fld==='profitPerUnit'||fld==='profit'
                      ? parseFloat(json.updatedRow[fld]).toFixed(2)
                      : json.updatedRow[fld]
                  );
                }
              });

              refreshSummary(date,json.summary);
            } catch(err) {
              alert(err.message);
              td.innerHTML = `<span class="value">${oldValNumeric}</span><i class="fas fa-edit edit-icon"></i>`;
            }
          } else {
            td.innerHTML = `<span class="value">${oldValNumeric}</span><i class="fas fa-edit edit-icon"></i>`;
          }
        };

        input.addEventListener('blur', finishNumeric);
        input.addEventListener('keydown', ev => { if (ev.key==='Enter') input.blur(); });
      }

      // Delete handlers (unchanged)
      if (e.target.closest('.delete-sale-btn')) {
        const delSaleBtn = e.target.closest('.delete-sale-btn');
        if(!confirm('Are you sure you want to delete this sale?')) return;
        const saleId = delSaleBtn.dataset.id;
        const saleDateKey = delSaleBtn.dataset.date;
        try {
          const res = await fetch('/api/delete-sale',{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({saleId})
          });
          const json = await res.json();
          if(!json.success) throw new Error(json.error||'Delete failed');
          delSaleBtn.closest('tr').remove();
          refreshSummary(saleDateKey,json.summary);
        } catch(err) { alert(err.message); }
      }

      if (e.target.closest('.delete-expense-btn')) {
        const delExpBtn = e.target.closest('.delete-expense-btn');
        if(!confirm('Are you sure you want to delete this expense?')) return;
        const expenseId = delExpBtn.dataset.id;
        const saleDateKey = delExpBtn.dataset.date;
        try {
          const res = await fetch('/api/delete-expense',{
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body:JSON.stringify({expenseId})
          });
          const json = await res.json();
          if(!json.success) throw new Error(json.error||'Delete failed');
          delExpBtn.closest('tr').remove();
          refreshSummary(saleDateKey,json.summary);
        } catch(err){ alert(err.message); }
      }
    });
  </script>
  <script src="/js/firebasePersistence.js" type="module"></script>
</body>
</html>
