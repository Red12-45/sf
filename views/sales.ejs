<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Sales Report - Filtered</title>
  <!-- Font Awesome for Icons -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <!-- Sales CSS -->
  <link rel="stylesheet" href="/css/sales.css?v=<%= v %>">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="/favicon.ico?v=<%= v %>" type="image/x-icon">
  <style>
    /* Inline‐editing styles */
    td.editable, td.editable-status { position: relative; cursor: pointer; }
    td.editable .edit-icon,
    td.editable-status .edit-icon {
      display: none;
      position: absolute;
      right: 6px; top: 50%;
      transform: translateY(-50%);
      font-size: 0.9em; color: #555;
    }
    td.editable:hover .edit-icon,
    td.editable-status:hover .edit-icon { display: inline; }
    td.editable.editing, td.editable-status.editing { padding: 0; }
    td.editable.editing input,
    td.editable-status.editing select,
    td.editable-status.editing input {
      width: 100%; border: none; padding: 4px;
      box-sizing: border-box; font-size: inherit;
    }

    /* Detail input style */
    td.editable-status .status-input {
      width: 45%; margin-right: 4%; padding: 2px; box-sizing: border-box;
      font-size: inherit;
    }

    /* NEW ➜ inline totals beside Filter */
    .summary-inline {
  display: inline-flex;
  gap: .8rem;
  margin-left: 1rem;
  align-items: center;
  font-size: .85em;
}

.summary-item {
  display: flex;
  align-items: center;
  gap: .3rem;
  padding: .2rem .6rem;
  border-radius: .5rem;
  font-weight: 500;
}

.summary-item.revenue {
  background: rgba(46, 204, 113, 0.1);
  color: #2ecc71;
}

.summary-item.profit {
  background: rgba(52, 152, 219, 0.1);
  color: #3498db;
}

.summary-item.expense {
  background: rgba(231, 76, 60, 0.1);
  color: #e74c3c;
}

.summary-item .fas {
  font-size: .9em;
}
  </style>
</head>
<body>
  <%
/* ---------------------------------------------------------
   Permission flags for this page
   --------------------------------------------------------- */
const canEdit   = !(blockedActions['/sales'] || []).includes('edit');
const canDelete = !(blockedActions['/sales'] || []).includes('delete');
%>
  <!-- Sidebar -->
  <div class="sidebar" id="sidebar">
    <div class="sidebar-logo">
      <i class="fas fa-chart-line"></i>
      <span>Sales Report</span>
    </div>
    <div class="sidebar-nav">
      <div class="sidebar-section">
        <div class="sidebar-heading">Dashboard</div>
        <ul class="sidebar-menu">
          <li class="sidebar-item"><a href="/" class="sidebar-link"><i class="fas fa-home"></i> Dashboard</a></li>
          <li class="sidebar-item"><a href="/sales" class="sidebar-link active"><i class="fas fa-shopping-cart"></i> Sales Report</a></li>
          <li class="sidebar-item"><a href="/profit" class="sidebar-link"><i class="fas fa-chart-bar"></i> Profit Report</a></li>
          <li class="sidebar-item"><a href="/performance" class="sidebar-link"><i class="fas fa-rocket"></i> Performance</a></li>
          <li class="sidebar-item"><a href="/stats" class="sidebar-link"><i class="fas fa-chart-pie"></i> Stats</a></li>
          <li class="sidebar-item"><a href="/expense" class="sidebar-link"><i class="fas fa-money-bill-wave"></i> Expenses</a></li>
        </ul>
      </div>
      <div class="sidebar-section">
        <div class="sidebar-heading">Products</div>
        <ul class="sidebar-menu">
          <li class="sidebar-item"><a href="/add-product" class="sidebar-link"><i class="fas fa-plus-circle"></i> Add New Product</a></li>
          <li class="sidebar-item"><a href="/view-products" class="sidebar-link"><i class="fas fa-boxes"></i> View/Edit Products</a></li>
        </ul>
      </div>
      <div class="sidebar-section">
        <div class="sidebar-heading">Settings</div>
        <ul class="sidebar-menu">
          <li class="sidebar-item"><a href="/profile" class="sidebar-link"><i class="fas fa-user"></i> Profile</a></li>
          <li class="sidebar-item"><a href="/logout" class="sidebar-link"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
        </ul>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content" id="main-content">
    <div class="page-container">

      <div class="formBox filter-form">
        <h2>
          <i class="fas fa-filter"></i> Filter 
          <span class="summary-inline">
            Total&nbsp;Revenue:&nbsp;₹<%= totalRevenueAmount.toFixed(2) %>&emsp;
            Total&nbsp;Profit:&nbsp;₹<%= profitWithoutExpenses.toFixed(2) %>&emsp;
            Total&nbsp;Expense:&nbsp;₹<%= totalExpensesAmount.toFixed(2) %>
          </span>
        </h2>

        <form action="/sales" method="GET" class="form-inline">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          <div class="form-field">
            <label for="saleDate">Sale Date:</label>
            <input type="date" id="saleDate" name="saleDate" value="<%= saleDate %>">
          </div>
          <div class="form-field">
            <label for="month">Month (YYYY-MM):</label>
            <input type="month" id="month" name="month" value="<%= month %>">
          </div>
          <div class="form-field">
            <label for="status">Sale Status:</label>
            <select id="status" name="status">
              <option value="All" <%= status==='All'?'selected':'' %>>All</option>
              <option value="Paid Cash" <%= status==='Paid Cash'?'selected':'' %>>Paid Cash</option>
              <option value="Paid Online" <%= status==='Paid Online'?'selected':'' %>>Paid Online</option>
              <option value="Not Paid" <%= status==='Not Paid'?'selected':'' %>>Not Paid</option>
              <option value="Half Cash + Half Online" <%= status==='Half Cash + Half Online'?'selected':'' %>>Half Cash + Half Online</option>
              <option value="Half Cash + Not Paid" <%= status==='Half Cash + Not Paid'?'selected':'' %>>Half Cash + Not Paid</option>
              <option value="Half Online + Not Paid" <%= status==='Half Online + Not Paid'?'selected':'' %>>Half Online + Not Paid</option>
            </select>
          </div>

          <button type="submit"><i class="fas fa-search"></i> Filter</button>
          <button type="submit" formaction="/download-sales" formmethod="GET">
            <i class="fas fa-file-excel"></i> Download Excel
          </button>
        </form>
      </div>

      <!-- Grouped Sales & Expenses -->
      <div class="sales-report">
        <% 
          const groupedSales = {}, groupedExpenses = {};
          sales.forEach(s => (groupedSales[s.saleDate] = groupedSales[s.saleDate]||[]).push(s));
          expenses.forEach(e => (groupedExpenses[e.saleDate] = groupedExpenses[e.saleDate]||[]).push(e));
          const allDates = Array.from(new Set([...Object.keys(groupedSales), ...Object.keys(groupedExpenses)])).sort();
        %>

        <% if (!allDates.length) { %>
          <div class="formBox"><p>No data found for the selected filters.</p></div>
        <% } else { %>
          <% allDates.forEach(date => { 
               const daySales = groupedSales[date]||[];
               const dayExps  = groupedExpenses[date]||[];
               const openingBal = openingBalances[date] || 0;
          %>
          <div class="date-group">
            <h2>Sales for <%= date %> (Opening Balance: ₹<%= openingBal.toFixed(2) %>)</h2>

              <% if (daySales[0]?.openingBalance!==undefined) { %>
                (Opening Balance: ₹<%= parseFloat(daySales[0].openingBalance).toFixed(2) %>)
              <% } %>
            </h2>
            <div class="time-info-container">
              <% if (openingTimes[date]?.openingTime) { %>
                <span class="time-info"><i class="far fa-clock"></i> Opening: <%= openingTimes[date].openingTime %></span>
              <% } %>
              <% if (openingTimes[date]?.closingTime) { %>
                <span class="time-info"><i class="far fa-clock"></i> Closing: <%= openingTimes[date].closingTime %></span>
              <% } %>
            </div>

            <!-- Sales Table -->
            <% if (daySales.length) { %>
            <table>
              <thead>
                <tr>
                  <th>Product Name</th>
                  <th>Wholesale Price</th>
                  <th>Retail Price</th>
                  <th>Quantity</th>
                  <th>Unit</th>
                  <th>Total Sale</th>
                  <th>Profit/Unit</th>
                  <th>Total Profit</th>
                  <th>Status</th>
                  
                  <th>Extra Info</th>
                  <th>Time</th>
                  <th style="text-align:center;">Action</th>
                </tr>
              </thead>
              <tbody>
                <% daySales.forEach(sale => {
                     const tot = sale.totalSale || (sale.retailPrice * sale.saleQuantity);
                %>
                <tr>
                  <td data-field="productName"><%= sale.productName %></td>
                  <td data-field="wholesalePrice"><%= parseFloat(sale.wholesalePrice).toFixed(2) %></td>

                  <!-- Retail Price inline edit -->
                  <td>
                    <%= parseFloat(sale.retailPrice).toFixed(2) %>
                  </td>

                  <!-- Quantity inline edit -->
                 <td class="<%= canEdit ? 'editable' : '' %>"
    data-id="<%= sale.id %>"
    data-field="saleQuantity"
    data-date="<%= date %>">
  <span class="value"><%= sale.saleQuantity %></span>
  <% if (canEdit) { %>
    <i class="fas fa-edit edit-icon"></i>
  <% } %>
</td>



                  <td><%= sale.unit||'-' %></td>
                  <!-- ▼ NEW: Total-Sale cell is now inline-editable ▼ -->
                <td class="<%= canEdit ? 'editable' : '' %>"
    data-id="<%= sale.id %>"
    data-field="totalSale"
    data-date="<%= date %>">
  <span class="value"><%= tot.toFixed(2) %></span>
  <% if (canEdit) { %>
    <i class="fas fa-edit edit-icon"></i>
  <% } %>
</td>


                  <td data-field="profitPerUnit"><%= parseFloat(sale.profitPerUnit).toFixed(2) %></td>
                  <td data-field="profit"><%= parseFloat(sale.profit).toFixed(2) %></td>

                  <!-- Status inline edit with data-detail attributes -->
                  <td class="editable-status" 
                      data-id="<%= sale.id %>" 
                      data-field="status" 
                      data-date="<%= date %>"
                      data-detail1="<%= sale.paymentDetail1||'' %>"
                      data-detail2="<%= sale.paymentDetail2||'' %>">
                    <span class="value"><%= sale.status %>
                      <% if (sale.paymentDetail1 || sale.paymentDetail2) { %><br><small>
                        <% if (sale.paymentDetail1) { %>Detail1: <%= parseFloat(sale.paymentDetail1).toFixed(2) %><% } %>
                        <% if (sale.paymentDetail2) { %>
                          <% if (sale.paymentDetail1) { %>, <% } %>
                          Detail2: <%= parseFloat(sale.paymentDetail2).toFixed(2) %>
                        <% } %>
                      </small><% } %>
                    </span>
                    <i class="fas fa-edit edit-icon"></i>
                  </td>

                  
                  <td><%= sale.extraInfo||'-' %></td>
                  <td><%= (sale.createdAt?.toDate ? sale.createdAt.toDate() : new Date(sale.createdAt)).toLocaleTimeString() %></td>
                  <td style="text-align:center;">
  <% if (canDelete) { %>
    <i class="fas fa-trash-alt delete-sale-btn"
       data-id="<%= sale.id %>" data-date="<%= date %>"></i>
  <% } %>
</td>

                </tr>
                <% }); %>
              </tbody>
            </table>
            <% } else { %>
              <p>No sales found for <%= date %>.</p>
            <% } %>

            <!-- Expenses Table -->
            <h2>Expenses for <%= date %>
              <% if (dayExps.length) {
                   const sumExp = dayExps.reduce((a,e)=>a+parseFloat(e.expenseCost||0),0);
              %> (₹<%= sumExp.toFixed(2) %>)<% } %>
            </h2>
            <% if (dayExps.length) { %>
            <table>
              <thead>
                <tr>
                  <th>Reason</th>
                  <th>Cost</th>
                  <th>Method</th>
                  <th>Detail 1</th>
                  <th>Detail 2</th>
                  <th>Time</th>
                  <th style="text-align:center;">Action</th>
                </tr>
              </thead>
              <tbody>
                <% dayExps.forEach(exp => { %>
                <tr>
                  <td><%= exp.expenseReason %></td>
                  <td><%= parseFloat(exp.expenseCost).toFixed(2) %></td>
                  <td><%= exp.expenseStatus %></td>
                  <td><%= exp.expenseDetail1||'-' %></td>
                  <td><%= exp.expenseDetail2||'-' %></td>
                  <td><%= (exp.createdAt?.toDate ? exp.createdAt.toDate() : new Date(exp.createdAt)).toLocaleTimeString() %></td>
                 <td style="text-align:center;">
  <% if (canDelete) { %>
    <i class="fas fa-trash-alt delete-expense-btn"
       data-id="<%= exp.id %>" data-date="<%= date %>"></i>
  <% } %>
</td>

                </tr>
                <% }); %>
              </tbody>
            </table>
            <% } else { %>
              <p>No expenses for <%= date %>.</p>
            <% } %>

            <!-- Summary Box -->
            <div class="summaryBox">
              <button class="toggleSummary" data-date="<%= date %>">
                <i class="fas fa-chart-pie"></i> Show Summary
              </button>
              <div class="summaryContent" id="summary_<%= date %>" style="display:none;">
                <% 
                  let tS=0,tP=0,cS=0,oS=0,nS=0,cE=0,oE=0;
                  daySales.forEach(s=>{
                    const amt=s.retailPrice*s.saleQuantity;
                    tS+=amt; tP+=s.profit;
                    switch(s.status){
                      case 'Paid Cash': cS+=amt; break;
                      case 'Paid Online': oS+=amt; break;
                      case 'Not Paid': nS+=amt; break;
                      case 'Half Cash + Half Online':
                        if(s.paymentDetail1) cS+=parseFloat(s.paymentDetail1);
                        if(s.paymentDetail2) oS+=parseFloat(s.paymentDetail2);
                        break;
                      case 'Half Cash + Not Paid':
                        if(s.paymentDetail1) cS+=parseFloat(s.paymentDetail1);
                        if(s.paymentDetail2) nS+=parseFloat(s.paymentDetail2);
                        break;
                      case 'Half Online + Not Paid':
                        if(s.paymentDetail1) oS+=parseFloat(s.paymentDetail1);
                        if(s.paymentDetail2) nS+=parseFloat(s.paymentDetail2);
                        break;
                    }
                  });
                  dayExps.forEach(e=>{
                    switch(e.expenseStatus){
                      case 'Paid Cash': cE+=parseFloat(e.expenseCost); break;
                      case 'Paid Online': oE+=parseFloat(e.expenseCost); break;
                      case 'Half Cash + Half Online':
                        if(e.expenseDetail1) cE+=parseFloat(e.expenseDetail1);
                        if(e.expenseDetail2) oE+=parseFloat(e.expenseDetail2);
                        break;
                      case 'Half Cash + Not Paid':
                        if(e.expenseDetail1) cE+=parseFloat(e.expenseDetail1);
                        break;
                      case 'Half Online + Not Paid':
                        if(e.expenseDetail1) oE+=parseFloat(e.expenseDetail1);
                        break;
                    }
                  });
                  
                  const finalCash  = openingBal + cS - cE;
                %>
                <p data-key="totalSales">Total Sales: <%= tS.toFixed(2) %></p>
                <p data-key="totalProfit">Total Profit: <%= tP.toFixed(2) %></p>
                <p data-key="totalCashSales">Total Cash Sales: <%= cS.toFixed(2) %></p>
                <p data-key="totalOnlineSales">Total Online Sales: <%= oS.toFixed(2) %></p>
                <p data-key="totalNotPaidSales">Total Not Paid Sales: <%= nS.toFixed(2) %></p>
                <p data-key="totalCashExpenses">Total Cash Expenses: <%= cE.toFixed(2) %></p>
                <p data-key="totalOnlineExpenses">Total Online Expenses: <%= oE.toFixed(2) %></p>
                <p data-key="finalCash">Final Cash: <%= finalCash.toFixed(2) %></p>
              </div>
            </div>
          </div>
          <% }); %>
        <% } %>
      </div>

    </div>
  </div>

  <!-- Client‑Side Scripts -->
 
    <!-- Client‑Side Script -->
    <script>
      const csrfToken = document
    .querySelector('form.form-inline input[name="_csrf"]')
    .value;
    
      // 1️⃣ Toggle summary panels
      document.querySelectorAll('.toggleSummary').forEach(btn => {
  btn.addEventListener('click', () => {
    const date = btn.dataset.date;
    const box  = document.getElementById('summary_' + date);
    const open = box.style.display === 'none';
    box.style.display = open ? 'block' : 'none';
    btn.innerHTML = '<i class="fas fa-chart-pie"></i> ' + (open ? 'Hide' : 'Show') + ' Summary';
  });
});
  
      // 2️⃣ Unified click handler for deletes & inline‑edits
      document.addEventListener('click', async e => {
        // — Delete a sale row —
        if (e.target.closest('.delete-sale-btn')) {
          const btn = e.target.closest('.delete-sale-btn');
          if (!confirm('Are you sure you want to delete this sale?')) return;
          try {
            const res = await fetch('/api/delete-sale', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json','X-CSRF-Token': csrfToken  },
              body: JSON.stringify({ saleId: btn.dataset.id })
            });
            const json = await res.json();
            if (!json.success) throw new Error(json.error || 'Delete failed');
            btn.closest('tr').remove();
            refreshSummary(btn.dataset.date, json.summary);
          } catch (err) {
            alert(err.message);
          }
          return;
        }
  
        // — Delete an expense row —
        if (e.target.closest('.delete-expense-btn')) {
          const btn = e.target.closest('.delete-expense-btn');
          if (!confirm('Are you sure you want to delete this expense?')) return;
          try {
            const res = await fetch('/api/delete-expense', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' ,'X-CSRF-Token': csrfToken },
              body: JSON.stringify({ expenseId: btn.dataset.id })
            });
            const json = await res.json();
            if (!json.success) throw new Error(json.error || 'Delete failed');
            btn.closest('tr').remove();
            refreshSummary(btn.dataset.date, json.summary);
          } catch (err) {
            alert(err.message);
          }
          return;
        }
  
        // — Inline edit only if you clicked an edit icon —
        const icon = e.target.closest('.edit-icon');
        if (!icon) return;
  
        const td    = icon.closest('td');
        const id    = td.dataset.id;
        const field = td.dataset.field;
        const date  = td.dataset.date;
        const oldVal  = td.querySelector('.value').firstChild.textContent.trim();
        const oldD1   = td.dataset.detail1;
        const oldD2   = td.dataset.detail2;
  
        // —— STATUS field inline edit ——
        // —— STATUS field inline edit (IMPROVED) ————————————————
if (field === 'status') {
  const STATUSES = [
    'Paid Cash',
    'Paid Online',
    'Not Paid',
    'Half Cash + Half Online',
    'Half Cash + Not Paid',
    'Half Online + Not Paid'
  ];

  // keep original values
  const oldStatus = oldVal;
  const oldD1     = td.dataset.detail1 || '';
  const oldD2     = td.dataset.detail2 || '';

  // clear the cell & mark editing
  td.classList.add('editing');
  td.innerHTML = '';

  // — form container
  const form = document.createElement('div');
  form.className = 'status-edit-form';
  td.appendChild(form);

  /* 1️⃣ STATUS DROPDOWN */
  const sel = document.createElement('select');
  STATUSES.forEach(s => {
    const opt = Object.assign(document.createElement('option'), { value:s, text:s });
    if (s === oldStatus) opt.selected = true;
    sel.appendChild(opt);
  });
  form.appendChild(sel);

  /* 2️⃣ DETAIL INPUTS (created later on demand) */
  const mkDetailInputs = () => {
    // remove stale
    form.querySelectorAll('.status-input').forEach(n => n.remove());

    // need details?
    if (!sel.value.startsWith('Half')) return;

    ['Detail 1', 'Detail 2'].forEach((ph, i) => {
      const inp = document.createElement('input');
      Object.assign(inp, {
        type:  'number',
        step:  '0.01',
        placeholder: ph,
        value: i ? oldD2 : oldD1,
        className: 'status-input'
      });
      form.appendChild(inp);
    });
  };
  mkDetailInputs();

  /* 3️⃣ ACTION BUTTONS */
  const btnSave   = document.createElement('button');
  const btnCancel = document.createElement('button');
  btnSave.innerHTML   = '<i class="fas fa-check"></i>';
btnCancel.innerHTML = '<i class="fas fa-times"></i>';

  btnSave.className     = 'status-btn save';
  btnCancel.className   = 'status-btn cancel';
  form.append(btnSave, btnCancel);

  /* ✨ UX bits */
  sel.addEventListener('change', mkDetailInputs);
  form.querySelectorAll('input,select').forEach(el => {
    // enter = save, esc = cancel
    el.addEventListener('keydown', ev => {
      if (ev.key === 'Enter') btnSave.click();
      if (ev.key === 'Escape') btnCancel.click();
    });
  });

  /* 🔘 Cancel just restores the original HTML */
  const restore = () => {
    td.classList.remove('editing');
    td.innerHTML =
      `<span class="value">${oldStatus}${
        (oldD1||oldD2)
          ? `<br><small>${oldD1?`Detail1: ${parseFloat(oldD1).toFixed(2)}`:''}${
              oldD2?`${oldD1?', ':''}Detail2: ${parseFloat(oldD2).toFixed(2)}`:''
            }</small>`
          : ''
      }</span><i class="fas fa-edit edit-icon"></i>`;
  };
  btnCancel.addEventListener('click', restore);

  /* 🔘 Save = validate → POST → update cell */
  btnSave.addEventListener('click', async () => {
    const inputs = form.querySelectorAll('.status-input');
    const d1 = inputs[0]?.value.trim() || '';
    const d2 = inputs[1]?.value.trim() || '';

    // basic numeric sanity when fields are visible
    if (inputs.length && (d1 === '' || d2 === '' || +d1 < 0 || +d2 < 0)) {
      return alert('Enter valid Detail 1 & Detail 2 amounts');
    }

    // skip server call if nothing changed
    if (sel.value === oldStatus && d1 === oldD1 && d2 === oldD2) return restore();

    try {
      const payload = { saleId:id, field:'status', value:sel.value, paymentDetail1:d1, paymentDetail2:d2 };
      const res  = await fetch('/api/edit-sale', { method:'POST', headers:{'Content-Type':'application/json','X-CSRF-Token': csrfToken }, body:JSON.stringify(payload) });
      const json = await res.json();
      if (!json.success) throw new Error(json.error || 'Update failed');

      // success → rebuild cell
      td.dataset.detail1 = d1;
      td.dataset.detail2 = d2;
      td.classList.remove('editing');
      td.innerHTML =
        `<span class="value">${sel.value}${
          inputs.length
            ? `<br><small>${d1 ? `Detail1: ${parseFloat(d1).toFixed(2)}` : ''}${
                d2 ? `${d1?', ':''}Detail2: ${parseFloat(d2).toFixed(2)}` : ''
              }</small>`
            : ''
        }</span><i class="fas fa-edit edit-icon"></i>`;

      refreshSummary(date, json.summary);
    } catch (err) {
      alert(err.message);
      restore();
    }
  });

  return; // ✅ handled
}

  
        // —— NUMERIC fields (saleQuantity or retailPrice) ——
        // —— NUMERIC fields (saleQuantity • retailPrice • totalSale) ——
        if (field === 'saleQuantity' || field === 'totalSale') {

          const oldNum = td.querySelector('.value').textContent.trim();
          td.classList.add('editing');
          td.innerHTML = `<input type="number" step="0.01" value="${oldNum}">`;

          const input = td.querySelector('input');
          input.focus();
          input.select();
  
          const finishNum = async () => {
            const newVal = input.value.trim();
            td.classList.remove('editing');
            if (newVal !== oldNum) {
              try {
                const res = await fetch('/api/edit-sale', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' ,'X-CSRF-Token': csrfToken },
                  body: JSON.stringify({ saleId: id, field, value: newVal })
                });
                const json = await res.json();
                if (!json.success) throw new Error(json.error || 'Update failed');
  
                td.innerHTML =
                `<span class="value">${parseFloat(json.updatedRow[field]).toFixed(2)}</span>` +
                `<i class="fas fa-edit edit-icon"></i>`;
  
                // update other cols
                const tr = td.closest('tr');
                ['productName','wholesalePrice','totalSale','profitPerUnit','profit'].forEach(fld => {
                  if (json.updatedRow[fld] !== undefined) {
                    const td2 = tr.querySelector(`td[data-field="${fld}"]`);
                    td2.textContent = (
                      ['wholesalePrice','totalSale','profitPerUnit','profit'].includes(fld)
                        ? parseFloat(json.updatedRow[fld]).toFixed(2)
                        : json.updatedRow[fld]
                    );
                  }
                });
  
                refreshSummary(date, json.summary);
              } catch (err) {
                alert(err.message);
                td.innerHTML = `<span class="value">${oldNum}</span><i class="fas fa-edit edit-icon"></i>`;
              }
            } else {
              td.innerHTML = `<span class="value">${oldNum}</span><i class="fas fa-edit edit-icon"></i>`;
            }
          };
  
          input.addEventListener('blur', finishNum);
          input.addEventListener('keydown', ev => { if (ev.key==='Enter') input.blur(); });
        }
      });
      function refreshSummary(date, summary) {
          if (!summary) return;
          const box = document.querySelector(`#summary_${date}`);
          if (!box) return;
          box.querySelector('[data-key="totalSales"]').textContent           = 'Total Sales: '            + summary.totalSales.toFixed(2);
          box.querySelector('[data-key="totalProfit"]').textContent          = 'Total Profit: '           + summary.totalProfit.toFixed(2);
          box.querySelector('[data-key="totalCashSales"]').textContent       = 'Total Cash Sales: '       + summary.totalCashSales.toFixed(2);
          box.querySelector('[data-key="totalOnlineSales"]').textContent     = 'Total Online Sales: '     + summary.totalOnlineSales.toFixed(2);
          box.querySelector('[data-key="totalNotPaidSales"]').textContent    = 'Total Not Paid Sales: '   + summary.totalNotPaidSales.toFixed(2);
          box.querySelector('[data-key="totalCashExpenses"]').textContent    = 'Total Cash Expenses: '    + summary.totalCashExpenses.toFixed(2);
          box.querySelector('[data-key="totalOnlineExpenses"]').textContent  = 'Total Online Expenses: '  + summary.totalOnlineExpenses.toFixed(2);
          box.querySelector('[data-key="finalCash"]').textContent            = 'Final Cash: '             + summary.finalCash.toFixed(2);
        }
    </script>

  
    <script src="/js/firebasePersistence.js" type="module"></script>
  
</body>
</html>
