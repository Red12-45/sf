<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="icon" href="/favicon.ico?v=<%= v %>" type="image/x-icon">

  <title>SalesFlow Dashboard</title>
  
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/index.css?v=<%= v %>">
</head>

<body>
  <!-- Navigation -->
  <nav>
    <div class="nav-brand">
      <i class="fas fa-chart-line"></i>
      <span>Dashboard</span>
    </div>
    <div class="nav-links">
      <a href="/add-product"><i class="fas fa-plus-circle"></i> Add Product</a>
      <a href="/view-products"><i class="fas fa-boxes"></i> View Products</a>
      <a href="/sales"><i class="fas fa-shopping-cart"></i> Sales</a>
      <a href="/expense"><i class="fas fa-receipt"></i> Expenses</a>
      <a href="/stats" class="profile"><i class="fas fa-chart-pie"></i> Stats</a>
      <a href="/pricing"><i class="fas fa-tags"></i> Pricing</a>
      
      <div class="subscription-info">
        <% if (user.subscriptionExpiry) { %>
          <span>
            <%= subscriptionRemaining %> day<%= subscriptionRemaining == 1 ? '' : 's' %> left
          </span>
        <% } else { %>
          <span>No active subscription</span>
        <% } %>
      </div>
      <% if (user && user.isMaster) { %>
        <a href="/profile" class="profile"><i class="fas fa-user"></i> Profile</a>
      <% } %>
      
      <a href="/customerservice" class="profile"><i class="fas fa-headset"></i></a>
      <a href="/logout" class="logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
    </div>
  </nav>

  <!-- Main Container -->
  <div class="page-container">
    <!-- LEFT SIDEBAR (Forms) -->
    <div class="forms-sidebar">
      <div id="toggleSidebar" class="collapse-arrow">
        <i class="fas fa-chevron-left"></i>
      </div>

      <!-- Sales Entry Form -->
      <div class="formBox">
        <h1><i class="fas fa-shopping-bag"></i> Sale Transaction</h1>
        <form id="saleForm" action="/sale" method="POST">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">

          <!-- Category -->
          <div>
            <label for="categorySelect">Category:</label>
            <select id="categorySelect">
              <option value="">-- Select a category --</option>
              <% categories
                   .sort((a, b) => a.localeCompare(b))
                   .forEach(cat => { %>
                <option value="<%= cat %>"><%= cat %></option>
              <% }); %>
            </select>
          </div>
      
          <!-- Product -->
          <div>
            <label for="productSelect">Product:</label>
            <select id="productSelect" name="productId" required>
              <option value="">-- Select a product --</option>
              <% products
                   .sort((a, b) => a.productName.localeCompare(b.productName))
                   .forEach(product => { %>
                    <option
                    value="<%= product.id %>"
                    data-category="<%= product.category %>"
                    data-retail="<%= product.retailPrice %>"
                    data-quantity="<%= product.quantity %>"
                    data-batches='<%= JSON.stringify(product.batches || []) %>'>
                    <%= product.productName %> (Stock: <%= parseFloat(product.quantity).toFixed(2) %>)
                  </option>
                  
              <% }); %>
            </select>
          </div>
      
          <!-- Total Sale -->
          <div>
            <label for="retailPrice">Total Price:</label>
            <input
              type="number"
              step="0.01"
              id="retailPrice"
              name="retailPrice"
              placeholder="Enter total sale amount"
              required>
          </div>
      
          <!-- Quantity -->
          <div>
            <label for="saleQuantity">Quantity:</label>
            <input
              type="number"
              step="any"
              id="saleQuantity"
              name="saleQuantity"
              placeholder="Enter quantity"
              required>
          </div>
      
          <!-- Computed Avg. Wholesale -->
          <div>
            <label for="wholesalePrice">Avg. Wholesale Price/Unit:</label>
            <input type="text" id="wholesalePrice" name="wholesalePrice" readonly>
          </div>
      
          <!-- Computed Profit/Unit -->
          <div>
            <label for="profitPerUnit">Profit/Unit:</label>
            <input type="text" id="profitPerUnit" name="profitPerUnit" readonly>
          </div>
      
          <!-- Computed Total Profit -->
          <div>
            <label for="totalProfit">Total Profit:</label>
            <input type="text" id="totalProfit" name="totalProfit" readonly>
          </div>
      
          <!-- Sale Date -->
          <div>
            <label for="saleDate">Sale Date:</label>
            <input
              type="date"
              id="saleDate"
              name="saleDate"
              value="<%= saleDate %>"
              required>
          </div>
      
       
        <!-- Payment Status -->
  <div>
    <label for="status">Payment Status:</label>
    <select id="status" name="status" required>
      <option>Paid Cash</option>
      <option>Paid Online</option>
      <option>Not Paid</option>
      <option>Half Cash + Half Online</option>
      <option>Half Cash + Not Paid</option>
      <option>Half Online + Not Paid</option>
    </select>
  </div>

  <!-- ▼ NEW: visible only for the three “Half …” cases ▼ -->
  <div id="combinedPaymentFields" style="display: none;">
    <div>
      <label id="paymentLabel1" for="paymentDetail1">Cash Amount:</label>
      <input  type="number"
              step="0.01"
              id="paymentDetail1"
              name="paymentDetail1"
              placeholder="Enter amount">
    </div>

    <div>
      <label id="paymentLabel2" for="paymentDetail2">Online Amount:</label>
      <input  type="number"
              step="0.01"
              id="paymentDetail2"
              name="paymentDetail2"
              placeholder="Enter amount">
    </div>
  </div>
  <!-- ▲ NEW block ends here ▲ -->

  <!-- Extra Info -->
  <div>
    <label for="extraInfo">Extra Info:</label>
    <textarea id="extraInfo" name="extraInfo" rows="2" cols="30"></textarea>
  </div>

        
      
          <button type="submit">
            <i class="fas fa-check-circle"></i> Process Sale
          </button>
        </form>
      </div>
      

      <!-- Expense Entry Form -->
      <div class="formBox">
        <h1><i class="fas fa-file-invoice-dollar"></i> Expense Transaction</h1>
        <form id="expenseForm" action="/expense" method="POST">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">

          <input type="hidden" name="saleDate" value="<%= saleDate %>">
          <div>
            <label for="expenseReason">Reason:</label>
            <input type="text" id="expenseReason" name="expenseReason" placeholder="Reason for expense" required>
          </div>
          <div>
            <label for="expenseCost">Cost:</label>
            <input type="number" step="0.01" id="expenseCost" name="expenseCost" placeholder="Cost" required>
          </div>
          <div>
            <label for="expenseStatus">Payment Method:</label>
            
            <select id="expenseStatus" name="expenseStatus" required>
              <option>Paid Cash</option>
              <option>Paid Online</option>
              <option>Not Paid</option>
              <option>Half Cash + Half Online</option>
              <option>Half Cash + Not Paid</option>
              <option>Half Online + Not Paid</option>
            </select>
          </div>
          <div id="expenseExtraFields" style="display:none;">
            <div>
              <label id="expenseLabel1" for="expenseDetail1">Detail 1:</label>
              <input type="number" step="0.01" id="expenseDetail1" name="expenseDetail1" placeholder="Amount">
            </div>
            <div>
              <label id="expenseLabel2" for="expenseDetail2">Detail 2:</label>
              <input type="number" step="0.01" id="expenseDetail2" name="expenseDetail2" placeholder="Amount">
            </div>
          </div>
          <button type="submit"><i class="fas fa-plus-circle"></i> Add Expense</button>
        </form>
      </div>

      <!-- Opening Balance Form -->
      <div class="formBox">
        <h1><i class="fas fa-wallet"></i> Opening Balance</h1>
        <form id="openingForm" action="/update-opening-balance" method="POST">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">

          <div>
            <label for="openingBalance">Opening Balance:</label>
            <input type="number" step="0.01" id="openingBalance" name="openingBalance" value="<%= openingBalance %>" required>
          </div>
          <div>
            <label for="openingTime">Opening Time:</label>
            <input type="text" id="openingTime" name="openingTime" value="<%= openingTime %>">
            <i class="fas fa-clock clickable" id="fillOpeningTime" style="cursor: pointer; margin-left: 8px;"></i>
          </div>
          <div>
            <label for="closingTime">Closing Time:</label>
            <input type="text" id="closingTime" name="closingTime" value="<%= closingTime %>">
            <i class="fas fa-clock clickable" id="fillClosingTime" style="cursor: pointer; margin-left: 8px;"></i>
          </div>
          <input type="hidden" name="saleDate" value="<%= saleDate %>">
          <button type="submit"><i class="fas fa-sync-alt"></i> Update Balance</button>
        </form>
      </div>

      <div class="formBox">
        <h1><i class="fas fa-user-clock"></i> Report Time</h1>
        <a href="/employees" class="go-report-link">
          <i class="fas fa-user-clock"></i> Go to Report Time
        </a>
      </div>
    </div>

    <!-- RIGHT CONTENT AREA (Tables and Summary) -->
    <div class="tables-content">
  <!-- Sales Table -->
  <div>
    <h2>
 <span id="salesHeader">
  Sales for <%= saleDate %> (Opening Balance: ₹<%= parseFloat(openingBalance).toFixed(2) %>)
</span>

<!-- live-updating time chips -->
<span id="dateInfo" class="date-info">
  <span id="openTimeWrap"
        <%= openingTime ? '' : 'style="display:none;"' %>>
    <i class="far fa-clock"></i>
    Open: <span id="openTimeDisplay"><%= openingTime || '-' %></span>
  </span>

  <span id="closeTimeWrap"
        <%= closingTime ? '' : 'style="display:none;"' %>>
    &nbsp;<i class="fas fa-clock"></i>
    Close: <span id="closeTimeDisplay"><%= closingTime || '-' %></span>
  </span>
</span>

    </h2>

    <% if (sales.length === 0) { %>
      <div class="no-data">
        <i class="far fa-chart-bar"></i>
        <p>No sales recorded for this date.</p>
      </div>
    <% } else { %>
      <table id="salesTable">
        <thead>
          <tr>
            <th>Product</th>
            <th>FIFO Avg. Wholesale</th>
            <th>Sale Price</th>
            <th>Qty</th>
            <th>Unit</th>
            <th>Total Sale</th>
            <th>Profit/Unit</th>
            <th>Total Profit</th>
            <th>Status</th>
            <th>Info</th>
            <th>Time</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <% sales.forEach(function (sale) { %>
            <tr>
              <td><%= sale.productName %></td>
              <td><%= parseFloat(sale.wholesalePrice).toFixed(2) %></td>
              <td><%= parseFloat(sale.retailPrice).toFixed(2) %></td>
              <td><%= parseFloat(sale.saleQuantity).toFixed(2) %></td>
              <td><%= sale.unit %></td>
              <td><%= parseFloat(sale.totalSale).toFixed(2) %></td>
              <td><%= parseFloat(sale.profitPerUnit).toFixed(2) %></td>
              <td><%= parseFloat(sale.profit).toFixed(2) %></td>
              <td>
                <%
                  let statusClass = "";
                  if (sale.status === "Paid Cash") statusClass = "status-cash";
                  else if (sale.status === "Paid Online") statusClass = "status-online";
                  else if (sale.status === "Not Paid") statusClass = "status-notpaid";
                  else statusClass = "status-mixed";
                %>
                <div class="status-wrapper">
                  <span class="status-pill <%= statusClass %>"><%= sale.status %></span>
                  <% if (sale.paymentDetail1 || sale.paymentDetail2) { %>
                    <div class="status-details-inline">
                      <% if (sale.paymentDetail1) { %>
                        <span><strong>Detail1:</strong> ₹<%= parseFloat(sale.paymentDetail1).toFixed(2) %></span>
                      <% } %>
                      <% if (sale.paymentDetail2) { %>
                        <span><strong>Detail2:</strong> ₹<%= parseFloat(sale.paymentDetail2).toFixed(2) %></span>
                      <% } %>
                    </div>
                  <% } %>
                </div>
              </td>

              <td><%= sale.extraInfo ? sale.extraInfo : "-" %></td>

              <!-- Time (IST) -->
              <td>
                <%
                  const createdDate = (sale.createdAt && sale.createdAt.toDate)
                    ? sale.createdAt.toDate()
                    : new Date(sale.createdAt);
                  const saleTime = createdDate.toLocaleTimeString('en-IN', {
                    hour12: false,
                    timeZone: 'Asia/Kolkata',
                  });
                %>
                <%= saleTime %>
              </td>

              <td style="text-align:center;">
                <i
                  class="fas fa-trash-alt delete-sale-btn"
                  data-id="<%= sale.id %>"
                  data-product-id="<%= sale.productId %>"
                  data-quantity="<%= sale.saleQuantity %>"
                ></i>
              </td>
            </tr>
          <% }); %>
        </tbody>
      </table>
    <% } %>
  </div>


      <!-- Expenses Table -->
      <div>
        <% 
          let totalExpenseAmount = 0;
          if (expenses && expenses.length > 0) {
            totalExpenseAmount = expenses.reduce((sum, exp) => sum + parseFloat(exp.expenseCost || 0), 0);
          }
        %>
        <h2>
          Expenses for <%= saleDate %>
          <% if (expenses.length > 0) { %>
            (Expense Amount: ₹<%= totalExpenseAmount.toFixed(2) %>)
          <% } %>
        </h2>
        <% if (expenses && expenses.length > 0) { %>
          <table id="expenseTable">
            <thead>
              <tr>
                <th>Expense Reason</th>
                <th>Expense Cost</th>
                <th>Payment Method</th>
                <th>Detail 1</th>
                <th>Detail 2</th>
                <th>Time</th>
                <th>Action</th> 
              </tr>
            </thead>
            <tbody>
              <% expenses.forEach(function(expense){ %>
                <tr>
                  <td><%= expense.expenseReason %></td>
                  <td><%= expense.expenseCost.toFixed(2) %></td>
                  <td><%= expense.expenseStatus %></td>
                  <td><%= expense.expenseDetail1 ? expense.expenseDetail1 : "-" %></td>
                  <td><%= expense.expenseDetail2 ? expense.expenseDetail2 : "-" %></td>
                  <td>
                    <% let expenseTime = expense.createdAt.toDate
                         ? expense.createdAt.toDate().toLocaleTimeString()
                         : new Date(expense.createdAt).toLocaleTimeString();
                    %>
                    <%= expenseTime %>
                  </td>
                  <td style="text-align:center;">
                    <i class="fas fa-trash-alt delete-expense-icon delete-expense-btn" data-id="<%= expense.id %>"></i>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        <% } else { %>
          <div class="no-data">
            <i class="fas fa-file-invoice-dollar"></i>
            <p>No expenses recorded for this date.</p>
          </div>
        <% } %>
      </div>

      <!-- Summary Section -->
      <div id="summarySection" class="formBox">
        <h2>Summary for <%= saleDate %></h2>
        <button id="toggleSummary">Show Daily Summary</button>
        <div id="summaryContent" style="display: none;">
          <p data-label="Total Sales: " data-key="totalSales"><%= totalSales.toFixed(2) %></p>
          <p data-label="Total Profit: " data-key="totalProfit"><%= totalProfit.toFixed(2) %></p>
          <p data-label="Total Cash Sales: " data-key="totalCashSales"><%= totalCashSales.toFixed(2) %></p>
          <p data-label="Total Online Sales: " data-key="totalOnlineSales"><%= totalOnlineSales.toFixed(2) %></p>
          <p data-label="Total Not Paid Sales: " data-key="totalNotPaidSales"><%= totalNotPaidSales.toFixed(2) %></p>
          <p data-label="Total Cash Expenses: " data-key="totalCashExpenses"><%= totalCashExpenses.toFixed(2) %></p>
          <p data-label="Total Online Expenses: " data-key="totalOnlineExpenses"><%= totalOnlineExpenses.toFixed(2) %></p>
          <p data-label="Final Cash: " data-key="finalCash"><%= finalCash.toFixed(2) %></p>
        </div>
      </div>
    </div>
  </div>

  <!-- Client‑Side Script -->
  <script>
    document.addEventListener('click', async (e) => {
  const btn = e.target.closest('.delete-sale-btn');
  if (!btn) return;
  if (!confirm('Delete this sale and restore stock?')) return;

  // grab the two new data-attributes
  const saleQty = parseFloat(btn.getAttribute('data-quantity')) || 0;
  const prodId  = btn.getAttribute('data-product-id');

  try {
    const res = await postJSON('/api/delete-sale', { saleId: btn.dataset.id });

    // 1) remove the row and update your summary
    const row = btn.closest('tr');
    row.remove();
    refreshSummary(res.summary);

    // 2) now patch the <option> in your dropdown
    const option = productSelect.querySelector(`option[value="${prodId}"]`);
    if (option) {
      const oldQty = parseFloat(option.getAttribute('data-quantity')) || 0;
      const newQty = oldQty + saleQty;
      option.setAttribute('data-quantity', newQty);

      // rebuild its label to show the new stock
       const label = option.dataset.originalName || option.textContent.split(' (Stock:')[0];
      option.textContent = `${label} (Stock: ${newQty.toFixed(2)})`;
    }
  } catch (err) {
    alert(err.message);
  }
});


    document.addEventListener('click', async e => {
      const btn = e.target.closest('.delete-expense-btn');
      if (!btn) return;

      if (!confirm('Delete this expense and update the summary?')) return;

      try {
        const res = await postJSON('/api/delete-expense', {
          expenseId: btn.dataset.id
        });
        btn.closest('tr').remove();
        refreshSummary(res.summary);
      } catch (err) {
        alert(err.message);
      }
    });

    const categorySelect = document.getElementById('categorySelect');
    const productSelect = document.getElementById('productSelect');
    const saleQuantityInput = document.getElementById('saleQuantity');
    const retailInput = document.getElementById('retailPrice');
    const statusSelect = document.getElementById('status');
    const combinedPaymentFields = document.getElementById('combinedPaymentFields');
    const paymentLabel1 = document.getElementById('paymentLabel1');
    const paymentLabel2 = document.getElementById('paymentLabel2');
    /* ——— Expense-status DOM handles ——— */
const expenseStatusSelect = document.getElementById('expenseStatus');
const expenseExtraFields  = document.getElementById('expenseExtraFields');
const expenseLabel1       = document.getElementById('expenseLabel1');
const expenseLabel2       = document.getElementById('expenseLabel2');

/* Preserve pristine product names for later label rebuilds */
productSelect.querySelectorAll('option[data-category]').forEach(opt => {
  opt.dataset.originalName = opt.textContent.split(' (Stock:')[0];
});


/* Collapse/expand the two optional amount fields */
expenseStatusSelect.addEventListener('change', () => {
  const val = expenseStatusSelect.value;
  if (val === 'Half Cash + Half Online') {
    expenseExtraFields.style.display = 'block';
    expenseLabel1.textContent = 'Cash Amount:';
    expenseLabel2.textContent = 'Online Amount:';
  } else if (val === 'Half Cash + Not Paid') {
    expenseExtraFields.style.display = 'block';
    expenseLabel1.textContent = 'Cash Amount:';
    expenseLabel2.textContent = 'Not Paid Amount:';
  } else if (val === 'Half Online + Not Paid') {
    expenseExtraFields.style.display = 'block';
    expenseLabel1.textContent = 'Online Amount:';
    expenseLabel2.textContent = 'Not Paid Amount:';
  } else {
    expenseExtraFields.style.display = 'none';
    document.getElementById('expenseDetail1').value = '';
    document.getElementById('expenseDetail2').value = '';
  }
});
/* Fire once so the form starts collapsed */
expenseStatusSelect.dispatchEvent(new Event('change'));


    categorySelect.addEventListener('change', function() {
      const selectedCategory = categorySelect.value;
      for (let i = 0; i < productSelect.options.length; i++) {
        const option = productSelect.options[i];
        if (option.value === "") continue;
        option.style.display = (!selectedCategory || option.getAttribute('data-category') === selectedCategory) ? "" : "none";
      }
      productSelect.selectedIndex = 0;
      updateSaleCalculations();
/* hide the extra payment fields the moment we reset the form */
statusSelect.dispatchEvent(new Event('change'));
    });

    productSelect.addEventListener('change', function() {
      updateSaleCalculations();
/* hide the extra payment fields the moment we reset the form */
statusSelect.dispatchEvent(new Event('change'));
    });

    statusSelect.addEventListener('change', function() {
      const status = statusSelect.value;
      if (status === "Half Cash + Half Online") {
        combinedPaymentFields.style.display = "block";
        paymentLabel1.textContent = "Cash Amount:";
        paymentLabel2.textContent = "Online Amount:";
      } else if (status === "Half Cash + Not Paid") {
        combinedPaymentFields.style.display = "block";
        paymentLabel1.textContent = "Cash Amount:";
        paymentLabel2.textContent = "Not Paid Amount:";
      } else if (status === "Half Online + Not Paid") {
        combinedPaymentFields.style.display = "block";
        paymentLabel1.textContent = "Online Amount:";
        paymentLabel2.textContent = "Not Paid Amount:";
      } else {
        combinedPaymentFields.style.display = "none";
        document.getElementById('paymentDetail1').value = "";
        document.getElementById('paymentDetail2').value = "";
      }
    });
    statusSelect.dispatchEvent(new Event('change'));

    document.getElementById('toggleSummary').addEventListener('click', function() {
      const summaryContent = document.getElementById('summaryContent');
      if (summaryContent.style.display === 'none') {
        summaryContent.style.display = 'block';
        this.textContent = 'Hide Summary';
      } else {
        summaryContent.style.display = 'none';
        this.textContent = 'Show Daily Summary';
      }
    });

    document.getElementById('toggleSidebar').addEventListener('click', function() {
      const formsSidebar = document.querySelector('.forms-sidebar');
      formsSidebar.classList.toggle('collapsed');
      this.innerHTML = formsSidebar.classList.contains('collapsed')
        ? '<i class="fas fa-angle-double-right"></i>'
        : '<i class="fas fa-angle-double-left"></i>';
    });

    function computeFIFO(batches, qty) {
      let rem = qty, totalWh = 0, totalRt = 0, used = 0;
      for (let b of batches) {
        if (rem <= 0) break;
        const take = Math.min(b.qty, rem);
        totalWh += b.wholesale * take;
        totalRt += b.retail * take;
        used += take;
        rem -= take;
      }
      return used ? { wholesale: totalWh/used, retail: totalRt/used } : { wholesale:0, retail:0 };
    }

    function updateSaleCalculations() {
  const opt = productSelect.options[productSelect.selectedIndex];
  const qty = parseFloat(saleQuantityInput.value) || 0;

  const wholesaleField   = document.getElementById('wholesalePrice');
  const profitUnitField  = document.getElementById('profitPerUnit');
  const totalProfitField = document.getElementById('totalProfit');

  /* reset if nothing chosen */
  if (!opt || !opt.value || qty <= 0) {
    wholesaleField.value = profitUnitField.value = totalProfitField.value = '';
    retailInput.placeholder = '';
    return;
  }

  /* FIFO averages from remaining batches */
  let batches = [];
  try { batches = JSON.parse(opt.getAttribute('data-batches') || '[]'); } catch {}
  const cmp   = computeFIFO(batches, qty);          // { wholesale, retail }
  const avgWh = cmp.wholesale;                      // ₹ / unit (FIFO)

  /* The input box ALWAYS holds the **TOTAL** sale amount */
  const totalEntered   = parseFloat(retailInput.value) || 0;

  /* Convert that total into a per-unit retail for profit maths */
  const perUnitRetail  = qty > 0 ? +(totalEntered / qty).toFixed(2) : 0;
  const profitUnit     = perUnitRetail - avgWh;

  /* Derived totals */
  const totalSaleAmt   = totalEntered;              // what the user typed
  const totalProfit    = profitUnit * qty;

  /* UI updates */
  retailInput.placeholder     = cmp.retail.toFixed(2); // default per-unit hint
  wholesaleField.value        = avgWh.toFixed(2);
  profitUnitField.value       = profitUnit.toFixed(2);
  totalProfitField.value      = totalProfit.toFixed(2);
}

    retailInput.addEventListener('input', updateSaleCalculations);
    saleQuantityInput.addEventListener('input', updateSaleCalculations);
    productSelect.addEventListener('change', updateSaleCalculations);

    function ensureTableExists (wrapperSelector, tableId, theadHtml) {
      if (document.querySelector(tableId)) return;
      const wrap = document.querySelector(wrapperSelector);
      if (!wrap) return;
      wrap.innerHTML = `
        <table id="${tableId.substring(1)}">
          ${theadHtml}
          <tbody></tbody>
        </table>`;
    }

    const cash = n => Number(n).toFixed(2);
    const postJSON = async (url, obj) => {
      const r = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json','X-CSRF-Token': '<%= csrfToken %>'
 },
        body: JSON.stringify(obj)
      });
      const j = await r.json();
      if (!j.success) throw new Error(j.error || 'Unknown error');
      return j;
    };
    const refreshSummary = s => {
      for (const [k, v] of Object.entries(s)) {
        const el = document.querySelector(`#summaryContent [data-key="${k}"]`);
        if (el) el.textContent = el.textContent.replace(/[-+]?\d+(\.\d+)?$/, cash(v));
      }
      document.getElementById('summaryContent').style.display = 'block';
      document.getElementById('toggleSummary').textContent = 'Hide Summary';
    };

     const setLoading = (btn, loading = true) => {
    if (!btn) return;
    if (loading) {
      btn.disabled = true;
      btn.dataset.origHtml = btn.innerHTML;
      btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Please wait…';
    } else {
      btn.disabled = false;
      if (btn.dataset.origHtml) btn.innerHTML = btn.dataset.origHtml;
    }
  };

 /* ——— SALE FORM ——— */
document.getElementById('saleForm').addEventListener('submit', async e => {
  if (e.submitter?.classList.contains('noAjax')) return;   // normal post
  e.preventDefault();

  const submitBtn = e.submitter || e.target.querySelector('button[type="submit"]');
  setLoading(submitBtn, true);   // 🔒 lock while request is in-flight

  try {
    const obj = Object.fromEntries(new FormData(e.target).entries());
    const res = await postJSON('/api/sale', obj);
    const s   = res.sale;

    /* update stock figure in the <select> option */
    const opt = productSelect.querySelector(`option[value="${s.productId}"]`);
    if (opt) {
      const oldQty  = parseFloat(opt.getAttribute('data-quantity')) || 0;
      const soldQty = parseFloat(s.saleQuantity) || 0;
      const newQty  = oldQty - soldQty;
      opt.setAttribute('data-quantity', newQty);
      const label = opt.dataset.originalName || opt.textContent.split(' (Stock:')[0];
      opt.textContent = `${label} (Stock: ${newQty.toFixed(2)})`;
    }

    /* build a new row and prepend it */
    const row = document.createElement('tr');
    const pillClass = {
      'Paid Cash'  : 'status-cash',
      'Paid Online': 'status-online',
      'Not Paid'   : 'status-notpaid'
    }[s.status] || 'status-mixed';

    row.innerHTML = `
      <td>${s.productName}</td>
      <td>${cash(s.wholesalePrice)}</td>
      <td>${cash(s.retailPrice)}</td>
      <td>${s.saleQuantity}</td>
      <td>${s.unit || '-'}</td>
      <td>${cash(s.totalSale)}</td>
      <td>${cash(s.profitPerUnit)}</td>
      <td>${cash(s.profit)}</td>
      <td>
        <span class="status-pill ${pillClass}">${s.status}</span>
        ${(s.paymentDetail1 || s.paymentDetail2)
          ? `<br><small>${s.paymentDetail1 ? 'Detail1: ' + s.paymentDetail1 : ''}${s.paymentDetail2 ? ', Detail2: ' + s.paymentDetail2 : ''}</small>`
          : ''} 
      </td>
      <td>${s.extraInfo || '-'}</td>
      <td>${new Date(s.createdAt).toLocaleTimeString()}</td>
      <td style="text-align:center;">
        <i class="fas fa-trash-alt delete-sale-btn" data-id="${s.id}"></i>
      </td>`;

    /* ensure table exists, then prepend */
    ensureTableExists(
      '.tables-content div:first-child',
      '#salesTable',
      `<thead>
         <tr>
           <th>Product</th><th>FIFO Avg. Wholesale</th><th>Sale Price</th>
           <th>Qty</th><th>Unit</th><th>Total Sale</th><th>Profit/Unit</th>
           <th>Total Profit</th><th>Status</th><th>Info</th><th>Time</th>
           <th>Action</th>
         </tr>
       </thead>`
    );
    document.querySelector('#salesTable tbody').prepend(row);

    /* refresh UI */
    refreshSummary(res.summary);
    e.target.reset();
    updateSaleCalculations();
    statusSelect.dispatchEvent(new Event('change'));

  } catch (err) {
    alert(err.message);
  } finally {
    setLoading(submitBtn, false);   // 🔓 unlock on success *or* error
  }
});


/* ——— EXPENSE FORM ——— */
document.getElementById('expenseForm').addEventListener('submit', async e => {
  e.preventDefault();

  const submitBtn = e.submitter || e.target.querySelector('button[type="submit"]');
  setLoading(submitBtn, true);

  try {
    const obj = Object.fromEntries(new FormData(e.target).entries());
    const res = await postJSON('/api/expense', obj);
    const ex  = res.expense;

    /* make sure the expense table exists */
    ensureTableExists(
      '.tables-content div:nth-child(2)',
      '#expenseTable',
      `<thead>
        <tr>
          <th>Expense Reason</th><th>Expense Cost</th><th>Payment Method</th>
          <th>Detail 1</th><th>Detail 2</th><th>Time</th><th>Action</th>
        </tr>
      </thead>`
    );

    /* build row and prepend */
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${ex.expenseReason}</td>
      <td>${cash(ex.expenseCost)}</td>
      <td>${ex.expenseStatus}</td>
      <td>${ex.expenseDetail1 || '-'}</td>
      <td>${ex.expenseDetail2 || '-'}</td>
      <td>${new Date(ex.createdAt).toLocaleTimeString()}</td>
      <td style="text-align:center;">
        <i class="fas fa-trash-alt delete-expense-icon delete-expense-btn" data-id="${ex.id}"></i>
      </td>`;
    document.querySelector('#expenseTable tbody').prepend(row);

    /* refresh summary and clean up */
    refreshSummary(res.summary);
    e.target.reset();

  } catch (err) {
    alert(err.message);
  } finally {
    setLoading(submitBtn, false);
  }
});


  /* ——— OPENING BALANCE FORM ——— */
document.getElementById('openingForm').addEventListener('submit', async e => {
  e.preventDefault();

  const submitBtn = e.submitter || e.target.querySelector('button[type="submit"]');
  setLoading(submitBtn, true);

  try {
    const obj = Object.fromEntries(new FormData(e.target).entries());
    const res = await postJSON('/api/opening-balance', obj);

    /* update header balance */
    document.getElementById('salesHeader').innerHTML =
      `Sales for ${obj.saleDate} (Opening Balance: ₹${cash(res.openingBalance)})`;

    /* NEW ▶ refresh time chips without refresh ◀ */
    document.getElementById('openTimeDisplay').textContent  = res.openingTime  || '-';
    document.getElementById('closeTimeDisplay').textContent = res.closingTime || '-';
    document.getElementById('openTimeWrap').style.display   = res.openingTime  ? '' : 'none';
    document.getElementById('closeTimeWrap').style.display  = res.closingTime ? '' : 'none';

    refreshSummary(res.summary);
  } catch (err) {
    alert(err.message);
  } finally {
    setLoading(submitBtn, false);
  }
});



  </script>
  <!-- convenience fill‑time buttons -->
  <script>
    function getCurrentTimeString() {
      const d = new Date();
      return `${String(d.getHours()).padStart(2,'0')}:${String(d.getMinutes()).padStart(2,'0')}`;
    }
    document.getElementById('fillOpeningTime').onclick = () =>
      (document.getElementById('openingTime').value = getCurrentTimeString());
    document.getElementById('fillClosingTime').onclick = () =>
      (document.getElementById('closingTime').value = getCurrentTimeString());
  </script>
  <!-- optional: restore client-side subscription redirect -->
  <script>
    const isSubscribed = <%= (user.subscriptionExpiry && subscriptionRemaining > 0) ? 'true' : 'false' %>;
    if (!isSubscribed) {
      const nav = performance.getEntriesByType("navigation")[0] || {};
      setTimeout(() => location.href = '/pricing', nav.type === "back_forward" ? 10000 : 5000);
    }
  </script>
  <script src="/js/firebasePersistence.js?v=<%= v %>" type="module"></script>
</body>
</html>
