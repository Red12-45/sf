<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="icon" href="/favicon.ico?v=<%= v %>" type="image/x-icon">

  <title>SalesFlow Dashboard</title>
  
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
 <!-- EARLY theme bootstrap – absolutely zero flash anywhere -->


<!-- Main stylesheet & full theme logic -->
<link rel="stylesheet" href="/css/index.css?v=<%= v %>">
<script src="/js/theme.js?v=<%= v %>"></script>


</head>

<body>
  
 <!-- Navigation -->
<nav class="sales-nav">
  <div class="nav-container">
    <div class="nav-brand">
  <div class="logo-wrapper">
    <i class="fas fa-chart-line"></i>
  </div>
  <span><%= user.businessName %></span>
</div>

    <div class="nav-links">
      <a href="/add-product" class="nav-item">
        <i class="fas fa-plus-circle"></i>
        <span>Add Product</span>
      </a>
      <a href="/view-products" class="nav-item">
        <i class="fas fa-boxes"></i>
        <span>Inventory</span>
      </a>
      <a href="/sales" class="nav-item">
        <i class="fas fa-shopping-cart"></i>
        <span>Sales</span>
      </a>
      <a href="/expense" class="nav-item">
        <i class="fas fa-receipt"></i>
        <span>Expenses</span>
      </a>
      <a href="/stats" class="nav-item">
        <i class="fas fa-chart-pie"></i>
        <span>Stats</span>
      </a>
   

      <a href="/pricing" class="nav-item">
        <i class="fas fa-tags"></i>
        <span>Pricing</span>
      </a>
      
      <div class="subscription-info">
        <div class="subscription-badge">
          <i class="fas fa-clock"></i>
          <% if (user.subscriptionExpiry) { %>
            <span>
              <%= subscriptionRemaining %> day<%= subscriptionRemaining == 1 ? '' : 's' %> left
            </span>
          <% } else { %>
            <span>No active subscription</span>
          <% } %>
        </div>
      </div>

   <div class="nav-right">
  <% if (user && user.isMaster) { %>
    <a href="/profile" class="nav-icon-btn">
      <i class="fas fa-user"></i>
    </a>
  <% } %>

  <a href="/customerservice" class="nav-icon-btn">
    <i class="fas fa-headset"></i>
  </a>

  <!-- ▼ NEW: Dark-mode toggle button ▼ -->
  <button id="darkModeToggle" class="nav-icon-btn dark-mode-toggle" type="button" title="Toggle dark mode">
    <i class="fas fa-moon"></i>
  </button>
  <!-- ▲ NEW button ends here ▲ -->

  <a href="/logout" class="logout-btn">
    <i class="fas fa-sign-out-alt"></i>
    <span>Logout</span>
  </a>
</div>

    </div>
    
    <button class="mobile-menu-btn">
      <i class="fas fa-bars"></i>
    </button>
  </div>
</nav>
  <!-- Main Container -->
  <div class="page-container">
    <!-- LEFT SIDEBAR (Forms) -->
    <div class="forms-sidebar">
      <div id="toggleSidebar" class="collapse-arrow">
        <i class="fas fa-chevron-left"></i>
      </div>

      <!-- Sales Entry Form -->
      <div class="formBox">
        <h1><i class="fas fa-shopping-bag"></i> Sale Transaction</h1>
        <form id="saleForm" action="/sale" method="POST">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">

          <!-- Category -->
          <div>
            <label for="categorySelect">Category:</label>
            <select id="categorySelect">
              <option value="">-- Select a category --</option>
              <% categories
                   .sort((a, b) => a.localeCompare(b))
                   .forEach(cat => { %>
                <option value="<%= cat %>"><%= cat %></option>
              <% }); %>
            </select>
          </div>

          <div>
  <label for="productSearch">Search Product:</label>
  <input
    type="text"
    id="productSearch"
    autocomplete="off"
    autocorrect="off"
    autocapitalize="none"
    spellcheck="false"
    placeholder="Type to search products">
</div>

      
          <!-- Product -->
          <div>
            <label for="productSelect">Product:</label>
            <select id="productSelect" name="productId" required>
              <option value="">-- Select a product --</option>
              <% products
                   .sort((a, b) => a.productName.localeCompare(b.productName))
                   .forEach(product => { %>
                    <<%
  /* stringify once and keep only safe Base64 text inside the attribute */
  const b64Batches =
        Buffer.from(JSON.stringify(product.batches || [])).toString('base64');
%>
<option
  value="<%= product.id %>"
  data-category="<%= product.category %>"
  data-retail="<%= product.retailPrice %>"
  data-quantity="<%= product.quantity %>"
  data-batches="<%= b64Batches %>">
  <%= product.productName %> (Stock: <%= parseFloat(product.quantity).toFixed(2) %>)
</option>
                  
              <% }); %>
            </select>
          </div>
      
          <!-- Total Sale -->
          <div>
            <label for="retailPrice">Total Price:</label>
            <input
              type="number"
              step="0.01"
              id="retailPrice"
              name="retailPrice"
              placeholder="Enter total sale amount"
              required>
          </div>
      
          <!-- Quantity -->
          <div>
            <label for="saleQuantity">Quantity:</label>
            <input
              type="number"
              step="any"
              id="saleQuantity"
              name="saleQuantity"
              placeholder="Enter quantity"
              required>
          </div>
      
          <!-- Computed Avg. Wholesale -->
          <div>
            <label for="wholesalePrice">Avg. Wholesale Price/Unit:</label>
            <input type="text" id="wholesalePrice" name="wholesalePrice" readonly>
          </div>
      
          <!-- Computed Profit/Unit -->
          <div>
            <label for="profitPerUnit">Profit/Unit:</label>
            <input type="text" id="profitPerUnit" name="profitPerUnit" readonly>
          </div>
      
          <!-- Computed Total Profit -->
          <div>
            <label for="totalProfit">Total Profit:</label>
            <input type="text" id="totalProfit" name="totalProfit" readonly>
          </div>
      <!-- Auto-generated, read-only Invoice No -->
<div>
  <label>Invoice No:</label>
<span id="invoiceNoDisplay" class="readonly-field">
  <%= currentInvoiceNo || '—' %>
</span>

<input type="hidden" id="invoiceNoHidden"
       name="invoiceNo"
       value="<%= currentInvoiceNo || '' %>">

</div>


          <!-- Sale Date -->
          <div>
            <label for="saleDate">Sale Date:</label>
            <input
              type="date"
              id="saleDate"
              name="saleDate"
              value="<%= saleDate %>"
              required>
          </div>
      
       
        <!-- Payment Status -->
  <div>
    <label for="status">Payment Status:</label>
    <select id="status" name="status" required>
      <option>Paid Cash</option>
      <option>Paid Online</option>
      <option>Not Paid</option>
      <option>Half Cash + Half Online</option>
      <option>Half Cash + Not Paid</option>
      <option>Half Online + Not Paid</option>
    </select>
  </div>

  <!-- ▼ NEW: visible only for the three “Half …” cases ▼ -->
  <div id="combinedPaymentFields" style="display: none;">
    <div>
      <label id="paymentLabel1" for="paymentDetail1">Cash Amount:</label>
      <input  type="number"
              step="0.01"
              id="paymentDetail1"
              name="paymentDetail1"
              placeholder="Enter amount">
    </div>

    <div>
      <label id="paymentLabel2" for="paymentDetail2">Online Amount:</label>
      <input  type="number"
              step="0.01"
              id="paymentDetail2"
              name="paymentDetail2"
              placeholder="Enter amount">
    </div>
  </div>
  <!-- ▲ NEW block ends here ▲ -->

  <!-- Extra Info -->
  <div>
    <label for="extraInfo">Extra Info:</label>
    <textarea id="extraInfo" name="extraInfo" rows="2" cols="30"></textarea>
  </div>

        
      
          <button type="submit">
            <i class="fas fa-check-circle"></i> Process Sale
          </button>
        </form>
      </div>
      

      <!-- Expense Entry Form -->
      <div class="formBox">
        <h1><i class="fas fa-file-invoice-dollar"></i> Expense Transaction</h1>
        <form id="expenseForm" action="/expense" method="POST">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">

          <input type="hidden" name="saleDate" value="<%= saleDate %>">
          <div>
            <label for="expenseReason">Reason:</label>
            <input type="text" id="expenseReason" name="expenseReason" placeholder="Reason for expense" required>
          </div>
          <div>
            <label for="expenseCost">Cost:</label>
            <input type="number" step="0.01" id="expenseCost" name="expenseCost" placeholder="Cost" required>
          </div>
          <div>
            <label for="expenseStatus">Payment Method:</label>
            
            <select id="expenseStatus" name="expenseStatus" required>
              <option>Paid Cash</option>
              <option>Paid Online</option>
              <option>Not Paid</option>
              <option>Half Cash + Half Online</option>
              <option>Half Cash + Not Paid</option>
              <option>Half Online + Not Paid</option>
            </select>
          </div>
          <div id="expenseExtraFields" style="display:none;">
            <div>
              <label id="expenseLabel1" for="expenseDetail1">Detail 1:</label>
              <input type="number" step="0.01" id="expenseDetail1" name="expenseDetail1" placeholder="Amount">
            </div>
            <div>
              <label id="expenseLabel2" for="expenseDetail2">Detail 2:</label>
              <input type="number" step="0.01" id="expenseDetail2" name="expenseDetail2" placeholder="Amount">
            </div>
          </div>
          <button type="submit"><i class="fas fa-plus-circle"></i> Add Expense</button>
        </form>
      </div>

      <!-- Opening Balance Form -->
      <div class="formBox">
        <h1><i class="fas fa-wallet"></i> Opening Balance</h1>
        <form id="openingForm" action="/update-opening-balance" method="POST">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">

          <div>
            <label for="openingBalance">Opening Balance:</label>
            <input type="number" step="0.01" id="openingBalance" name="openingBalance" value="<%= openingBalance %>" required>
          </div>
          <div>
            <label for="openingTime">Opening Time:</label>
            <input type="text" id="openingTime" name="openingTime" value="<%= openingTime %>">
            <i class="fas fa-clock clickable" id="fillOpeningTime" style="cursor: pointer; margin-left: 8px;"></i>
          </div>
          <div>
            <label for="closingTime">Closing Time:</label>
            <input type="text" id="closingTime" name="closingTime" value="<%= closingTime %>">
            <i class="fas fa-clock clickable" id="fillClosingTime" style="cursor: pointer; margin-left: 8px;"></i>
          </div>
          <input type="hidden" name="saleDate" value="<%= saleDate %>">
          <button type="submit"><i class="fas fa-sync-alt"></i> Update Balance</button>
        </form>
      </div>

      <div class="formBox">
        <h1><i class="fas fa-user-clock"></i> Report Time</h1>
        <a href="/employees" class="go-report-link">
          <i class="fas fa-user-clock"></i> Go to Report Time
        </a>
      </div>
    </div>

    <!-- RIGHT CONTENT AREA (Tables and Summary) -->
    <div class="tables-content">
  <!-- Sales Table -->
  <div>
    <h2>
      <span id="salesHeader">
        Sales for <%= saleDate %> (Opening Balance: ₹<%= parseFloat(openingBalance).toFixed(2) %>)
      </span>

 <!-- ▸ INVOICE ACTIONS (AJAX, zero-refresh) -->
<span id="invoiceActionWrap">
  <% if (!currentInvoiceNo) { %>
    <a href="#" id="startInvoiceBtn" class="invoice-action-btn btn-blue ajax-invoice">
      <i class="fas fa-file-invoice"></i>
      <span>Start Invoice</span>
    </a>
  <% } else { %>
    <span class="current-invoice-label">
      <i class="fas fa-file-invoice"></i>
      Invoice #<%= currentInvoiceNo %>
    </span>
    <a href="#" id="finishInvoiceBtn" class="invoice-action-btn btn-green ajax-invoice">
      <i class="fas fa-check-circle"></i>
      <span>Finish</span>
    </a>
  <% } %>
</span>


      <!-- live-updating time chips -->
      <span id="dateInfo" class="date-info">
        <span id="openTimeWrap" <%= openingTime ? '' : 'style="display:none;"' %>>
          <i class="far fa-clock"></i>
          Open: <span id="openTimeDisplay"><%= openingTime || '-' %></span>
        </span>
        <span id="closeTimeWrap" <%= closingTime ? '' : 'style="display:none;"' %>>
          &nbsp;<i class="fas fa-clock"></i>
          Close: <span id="closeTimeDisplay"><%= closingTime || '-' %></span>
        </span>
      </span>
    </h2>



    <% if (sales.length === 0) { %>
      <div class="no-data">
        <i class="far fa-chart-bar"></i>
        <p>No sales recorded for this date.</p>
      </div>
    <% } else { %>
      <table id="salesTable">
        <thead>
          <tr>
            <th>Product</th>
            <th>Wholesale</th>
            <th>Sale Price</th>
            <th>Qty</th>
            <th>Unit</th>
            <th>Total Sale</th>
            <th>Profit/Unit</th>
            <th>Total Profit</th>
            <th>GST Payable</th> 
            <th>Status</th>
            <th>Info</th>
            <th>Time</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <% sales.forEach(function (sale) { %>
            <tr>
              <td><%= sale.productName %></td>
              <td><%= parseFloat(sale.wholesalePrice).toFixed(2) %></td>
              <td><%= parseFloat(sale.retailPrice).toFixed(2) %></td>
              <td><%= parseFloat(sale.saleQuantity).toFixed(2) %></td>
              <td><%= sale.unit %></td>
              <td><%= parseFloat(sale.totalSale).toFixed(2) %></td>
              <td><%= parseFloat(sale.profitPerUnit).toFixed(2) %></td>
              <td><%= parseFloat(sale.profit).toFixed(2) %></td>
              <td><%= sale.gstPayable !== undefined
        ? parseFloat(sale.gstPayable).toFixed(2)
        : '-' %></td>

              <td>
                <%
                  let statusClass = "";
                  if (sale.status === "Paid Cash") statusClass = "status-cash";
                  else if (sale.status === "Paid Online") statusClass = "status-online";
                  else if (sale.status === "Not Paid") statusClass = "status-notpaid";
                  else statusClass = "status-mixed";
                %>
                <div class="status-wrapper">
                  <span class="status-pill <%= statusClass %>"><%= sale.status %></span>
                  <% if (sale.paymentDetail1 || sale.paymentDetail2) { %>
                    <div class="status-details-inline">
                      <% if (sale.paymentDetail1) { %>
                        <span><strong>Detail1:</strong> ₹<%= parseFloat(sale.paymentDetail1).toFixed(2) %></span>
                      <% } %>
                      <% if (sale.paymentDetail2) { %>
                        <span><strong>Detail2:</strong> ₹<%= parseFloat(sale.paymentDetail2).toFixed(2) %></span>
                      <% } %>
                    </div>
                  <% } %>
                </div>
              </td>

              <td><%= sale.extraInfo ? sale.extraInfo : "-" %></td>

              <!-- Time (IST) -->
              <td>
                <%
                  const createdDate = (sale.createdAt && sale.createdAt.toDate)
                    ? sale.createdAt.toDate()
                    : new Date(sale.createdAt);
                  const saleTime = createdDate.toLocaleTimeString('en-IN', {
                    hour12: false,
                    timeZone: 'Asia/Kolkata',
                  });
                %>
                <%= saleTime %>
              </td>

<td style="text-align:center;">
  <!-- Single-item invoice (kept) -->
<a href="/invoice/<%= sale.id %>" target="_blank" rel="noopener noreferrer" class="print-btn"
   title="Print **this line only**">
  <i class="fas fa-receipt"></i>
</a>
  &nbsp;
  <!-- NEW: multi-item invoice -->
<a href="/invoice-number/<%= sale.invoiceNo %>" target="_blank" rel="noopener noreferrer"
   title="Print full invoice <%= sale.invoiceNo %>">
  <i class="fas fa-file-invoice"></i>
</a>
  &nbsp;
  <i class="fas fa-trash-alt delete-sale-btn"
     data-id="<%= sale.id %>"
     data-product-id="<%= sale.productId %>"
     data-quantity="<%= sale.saleQuantity %>"
     title="Delete sale">
  </i>
</td>

            </tr>
          <% }); %>
        </tbody>
      </table>
    <% } %>
  </div>

<!-- Expenses Table (rendered only when at least one expense exists) -->
<div>
  <% if (expenses && expenses.length > 0) { %>
    <% const totalExpenseAmount =
         expenses.reduce((sum, exp) =>
           sum + parseFloat(exp.expenseCost || 0), 0); %>

    <h2>
      Expenses for <%= saleDate %>
      (Expense Amount: ₹<%= totalExpenseAmount.toFixed(2) %>)
    </h2>

    <table id="expenseTable">
  <thead>
  <tr>
    <th>Expense Reason</th>
    <th>Expense Cost</th>
    <th>Payment Method</th>
    <th>Detail&nbsp;1</th>
    <th>Detail&nbsp;2</th>
    <th>Time</th>
    <th>Action</th>
  </tr>
</thead>

      <tbody>
        <% expenses.forEach(expense => { %>
         <tr>
  <td><%= expense.expenseReason %></td>
  <td><%= expense.expenseCost.toFixed(2) %></td>
  <td><%= expense.expenseStatus %></td>
  <td><%= expense.expenseDetail1 ? expense.expenseDetail1 : '-' %></td>
  <td><%= expense.expenseDetail2 ? expense.expenseDetail2 : '-' %></td>
  <td>
    <%
      const expenseTime = expense.createdAt.toDate
        ? expense.createdAt.toDate().toLocaleTimeString()
        : new Date(expense.createdAt).toLocaleTimeString();
    %>
    <%= expenseTime %>
  </td>
  <td style="text-align:center;">
    <i class="fas fa-trash-alt delete-expense-icon delete-expense-btn"
       data-id="<%= expense.id %>"></i>
  </td>
</tr>

        <% }); %>
      </tbody>
    </table>
  <% } %> <!-- nothing is rendered when there are zero expenses -->
</div>


      <!-- Summary Section -->
      <div id="summarySection" class="formBox">
        <h2>Summary for <%= saleDate %></h2>
        <button id="toggleSummary">Show Daily Summary</button>
        <div id="summaryContent" style="display: none;">
          <p data-label="Total Sales: " data-key="totalSales"><%= totalSales.toFixed(2) %></p>
          <p data-label="Total Profit: " data-key="totalProfit"><%= totalProfit.toFixed(2) %></p>
          <p data-label="Total Cash Sales: " data-key="totalCashSales"><%= totalCashSales.toFixed(2) %></p>
          <p data-label="Total Online Sales: " data-key="totalOnlineSales"><%= totalOnlineSales.toFixed(2) %></p>
          <p data-label="Total Not Paid Sales: " data-key="totalNotPaidSales"><%= totalNotPaidSales.toFixed(2) %></p>
          <p data-label="Total Cash Expenses: " data-key="totalCashExpenses"><%= totalCashExpenses.toFixed(2) %></p>
         <p data-label="Total GST Payable: "
   data-key="totalGstPayable">
   <%= (typeof totalGstPayable !== 'undefined' ? totalGstPayable.toFixed(2) : '0.00') %>
</p>


          <p data-label="Total Online Expenses: " data-key="totalOnlineExpenses"><%= totalOnlineExpenses.toFixed(2) %></p>
          <p data-label="Final Cash: " data-key="finalCash"><%= finalCash.toFixed(2) %></p>
        </div>
      </div>
    </div>
  </div>

  <!-- XSS-escape helper: always load *before* any other inline JS -->
<script>
  /**
   * escapeHtml(str) – converts &, <, >, ", ' into safe entities
   * so template literals injected with .innerHTML can’t break out.
   */
  function escapeHtml (str = '') {
    return String(str)
      .replaceAll('&', '&amp;')
      .replaceAll('<', '&lt;')
      .replaceAll('>', '&gt;')
      .replaceAll('"', '&quot;')
      .replaceAll("'", '&#39;');
  }
</script>


  <!-- Client‑Side Script -->
  <script>
    document.addEventListener('click', async (e) => {
  const btn = e.target.closest('.delete-sale-btn');
  if (!btn) return;
  if (!confirm('Delete this sale and restore stock?')) return;

  // grab the two new data-attributes
  const saleQty = parseFloat(btn.getAttribute('data-quantity')) || 0;
  const prodId  = btn.getAttribute('data-product-id');

  try {
    const res = await postJSON('/api/delete-sale', { saleId: btn.dataset.id });

    // 1) remove the row and update your summary
    const row = btn.closest('tr');
    row.remove();
    refreshSummary(res.summary);

    // 2) now patch the <option> in your dropdown
    const option = productSelect.querySelector(`option[value="${prodId}"]`);
    if (option) {
      const oldQty = parseFloat(option.getAttribute('data-quantity')) || 0;
      const newQty = oldQty + saleQty;
      option.setAttribute('data-quantity', newQty);

      // rebuild its label to show the new stock
       const label = option.dataset.originalName || option.textContent.split(' (Stock:')[0];
      option.textContent = `${label} (Stock: ${newQty.toFixed(2)})`;
    }
  } catch (err) {
    alert(err.message);
  }
});


    document.addEventListener('click', async e => {
      const btn = e.target.closest('.delete-expense-btn');
      if (!btn) return;

      if (!confirm('Delete this expense and update the summary?')) return;

      try {
        const res = await postJSON('/api/delete-expense', {
          expenseId: btn.dataset.id
        });
        btn.closest('tr').remove();
refreshSummary(res.summary);
refreshExpenseHeader();  
      } catch (err) {
        alert(err.message);
      }
    });

    const categorySelect = document.getElementById('categorySelect');
    const productSelect = document.getElementById('productSelect');
    const saleQuantityInput = document.getElementById('saleQuantity');
    const retailInput = document.getElementById('retailPrice');
    const statusSelect = document.getElementById('status');
    const combinedPaymentFields = document.getElementById('combinedPaymentFields');
    const paymentLabel1 = document.getElementById('paymentLabel1');
    const paymentLabel2 = document.getElementById('paymentLabel2');
    /* ——— Expense-status DOM handles ——— */
const expenseStatusSelect = document.getElementById('expenseStatus');
const expenseExtraFields  = document.getElementById('expenseExtraFields');
const expenseLabel1       = document.getElementById('expenseLabel1');
const expenseLabel2       = document.getElementById('expenseLabel2');
const productSearchInput  = document.getElementById('productSearch');

/* ——— helpers to filter + auto-open the product dropdown ——— */
/* ——— helpers to filter + auto-open the product dropdown ——— */
function openProductDropdown(visible) {
  if (visible === 0) {                     // nothing found → collapse
    productSelect.removeAttribute('size');
    productSelect.style.minWidth = '';     // 🆕 reset width
    return;
  }

  /* keep the list open even when only ONE match remains           *
   * (size=1 would snap shut again, hiding the option)             */
  const rows = Math.max(visible, 2);       // at least two rows tall
  productSelect.setAttribute('size', Math.min(8, rows));

  resizeProductDropdown();                 // 🆕 auto-fit width
}
/* ── helper: widen the <select> so every visible option shows fully ── */
function resizeProductDropdown() {
  /* mirror span for accurate text-width measurement */
  const probe = document.createElement('span');
  probe.style.cssText = `
    position:absolute; visibility:hidden; white-space:nowrap;
    font:${window.getComputedStyle(productSelect).font};
  `;
  document.body.appendChild(probe);

  let max = 0;
  for (const opt of productSelect.options) {
    if (opt.style.display === 'none') continue;     // skip hidden ones
    probe.textContent = opt.textContent;
    max = Math.max(max, probe.offsetWidth);
  }
  document.body.removeChild(probe);

  /* +40px = native paddings + scrollbar fudge factor */
  productSelect.style.minWidth = (max + 40) + 'px';
}




function filterProductOptions(shouldOpen = false) {
  const cat    = (categorySelect.value || '').toLowerCase().trim();
  const raw    = productSearchInput.value.toLowerCase();
  const tokens = raw.split(/\s+/).filter(Boolean);

  let visible = 0;
  for (const opt of productSelect.options) {
    if (!opt.value) { 
      opt.style.display = ''; 
      continue;   // keep the “-- Select a product --” placeholder
    }

    const name    = (opt.dataset.originalName || opt.textContent).toLowerCase();
    const prodCat = (opt.getAttribute('data-category') || '').toLowerCase();

    // If no category is selected, inCat is always true; tokens empty ⇒ inText true
    const inCat  = !cat || prodCat === cat;
    const inText = tokens.length === 0 
                  ? true 
                  : tokens.every(tk => name.includes(tk));

    // Show whenever it matches category AND text; no special “hideAll”
    opt.style.display = (inCat && inText) ? '' : 'none';

    if (opt.style.display === '') visible++;
  }

  productSelect.selectedIndex = 0;          
    // only auto-open when caller asked *and* there’s at least one search token
  if (shouldOpen && tokens.length > 0) {
    openProductDropdown(visible);
  } else {
    openProductDropdown(0);
  }

}






/* Preserve pristine product names for later label rebuilds */
productSelect.querySelectorAll('option[data-category]').forEach(opt => {
  opt.dataset.originalName = opt.textContent.split(' (Stock:')[0];
});


/* Collapse/expand the two optional amount fields */
expenseStatusSelect.addEventListener('change', () => {
  const val = expenseStatusSelect.value;
  if (val === 'Half Cash + Half Online') {
    expenseExtraFields.style.display = 'block';
    expenseLabel1.textContent = 'Cash Amount:';
    expenseLabel2.textContent = 'Online Amount:';
  } else if (val === 'Half Cash + Not Paid') {
    expenseExtraFields.style.display = 'block';
    expenseLabel1.textContent = 'Cash Amount:';
    expenseLabel2.textContent = 'Not Paid Amount:';
  } else if (val === 'Half Online + Not Paid') {
    expenseExtraFields.style.display = 'block';
    expenseLabel1.textContent = 'Online Amount:';
    expenseLabel2.textContent = 'Not Paid Amount:';
  } else {
    expenseExtraFields.style.display = 'none';
    document.getElementById('expenseDetail1').value = '';
    document.getElementById('expenseDetail2').value = '';
  }
});
/* Fire once so the form starts collapsed */
expenseStatusSelect.dispatchEvent(new Event('change'));
refreshExpenseHeader();            // keep “Expense Amount: ₹…” correct on load



categorySelect.addEventListener('change', () => {
  filterProductOptions(false);            // just filter, DON’T open
  updateSaleCalculations();
  statusSelect.dispatchEvent(new Event('change'));
  collapseDropdown();
});


productSearchInput.addEventListener('input', () => {
  filterProductOptions(true);                       // refresh + auto-open
  statusSelect.dispatchEvent(new Event('change'));  // keep extra fields hidden
});

/* collapse helper → also restore original width */
const collapseDropdown = () => {
  productSelect.removeAttribute('size');
  productSelect.style.minWidth = '';       // 🆕 shrink back to normal
};

productSelect.addEventListener('click', collapseDropdown); // auto-collapse on click
productSelect.addEventListener('blur',  collapseDropdown); // …and when focus leaves

filterProductOptions(false);   // initialise list, keep collapsed


    

    statusSelect.addEventListener('change', function() {
      const status = statusSelect.value;
      if (status === "Half Cash + Half Online") {
        combinedPaymentFields.style.display = "block";
        paymentLabel1.textContent = "Cash Amount:";
        paymentLabel2.textContent = "Online Amount:";
      } else if (status === "Half Cash + Not Paid") {
        combinedPaymentFields.style.display = "block";
        paymentLabel1.textContent = "Cash Amount:";
        paymentLabel2.textContent = "Not Paid Amount:";
      } else if (status === "Half Online + Not Paid") {
        combinedPaymentFields.style.display = "block";
        paymentLabel1.textContent = "Online Amount:";
        paymentLabel2.textContent = "Not Paid Amount:";
      } else {
        combinedPaymentFields.style.display = "none";
        document.getElementById('paymentDetail1').value = "";
        document.getElementById('paymentDetail2').value = "";
      }
    });
    statusSelect.dispatchEvent(new Event('change'));

    document.getElementById('toggleSummary').addEventListener('click', function() {
      const summaryContent = document.getElementById('summaryContent');
      if (summaryContent.style.display === 'none') {
        summaryContent.style.display = 'block';
        this.textContent = 'Hide Summary';
      } else {
        summaryContent.style.display = 'none';
        this.textContent = 'Show Daily Summary';
      }
    });

    document.getElementById('toggleSidebar').addEventListener('click', function() {
      const formsSidebar = document.querySelector('.forms-sidebar');
      formsSidebar.classList.toggle('collapsed');
      this.innerHTML = formsSidebar.classList.contains('collapsed')
        ? '<i class="fas fa-angle-double-right"></i>'
        : '<i class="fas fa-angle-double-left"></i>';
    });

    function computeFIFO(batches, qty) {
      let rem = qty, totalWh = 0, totalRt = 0, used = 0;
      for (const b of batches) {
  const available = +b.qty || 0;                 // force number, default 0
  if (rem <= 0 || available <= 0) break;

  const take = Math.min(available, rem);
  totalWh += (+b.wholesale || 0) * take;         // coerce to number
  totalRt += (+b.retail    || 0) * take;
  used    += take;
  rem     -= take;
}

      return used ? { wholesale: totalWh/used, retail: totalRt/used } : { wholesale:0, retail:0 };
    }

    function updateSaleCalculations() {
  const opt = productSelect.options[productSelect.selectedIndex];
  const qty = parseFloat(saleQuantityInput.value) || 0;

  const wholesaleField   = document.getElementById('wholesalePrice');
  const profitUnitField  = document.getElementById('profitPerUnit');
  const totalProfitField = document.getElementById('totalProfit');

  /* reset if nothing chosen */
  if (!opt || !opt.value || qty <= 0) {
    wholesaleField.value = profitUnitField.value = totalProfitField.value = '';
    retailInput.placeholder = '';
    return;
  }

  /* FIFO averages from remaining batches */
const b64      = opt.getAttribute('data-batches') || 'W10='; // default "[]"
let batches    = [];
try { batches  = JSON.parse(atob(b64)); } catch {}

  const cmp   = computeFIFO(batches, qty);          // { wholesale, retail }
  const avgWh = cmp.wholesale;                      // ₹ / unit (FIFO)

  /* The input box ALWAYS holds the **TOTAL** sale amount */
  const totalEntered   = parseFloat(retailInput.value) || 0;

  /* Convert that total into a per-unit retail for profit maths */
  const perUnitRetail  = qty > 0 ? +(totalEntered / qty).toFixed(2) : 0;
  const profitUnit     = perUnitRetail - avgWh;

  /* Derived totals */
  const totalSaleAmt   = totalEntered;              // what the user typed
  const totalProfit    = profitUnit * qty;

  /* UI updates */
  retailInput.placeholder     = cmp.retail.toFixed(2); // default per-unit hint
  wholesaleField.value        = avgWh.toFixed(2);
  profitUnitField.value       = profitUnit.toFixed(2);
  totalProfitField.value      = totalProfit.toFixed(2);
}

    retailInput.addEventListener('input', updateSaleCalculations);
    saleQuantityInput.addEventListener('input', updateSaleCalculations);
    productSelect.addEventListener('change', updateSaleCalculations);

/* ──────────────────────────────────────────────────────────────
   ensureTableExists – create the table **without** nuking the H2
   (preserves header, kills “no-data” div, and keeps page dynamic)
   ────────────────────────────────────────────────────────────── */
function ensureTableExists (wrapperSelector, tableId, theadHtml) {
  /* already present? --> nothing to do */
  if (document.querySelector(tableId)) return;

  const wrap = document.querySelector(wrapperSelector);
  if (!wrap) return;

  /* 1) zap the temporary “No data” notice, if any                  */
  const noData = wrap.querySelector('.no-data');
  if (noData) noData.remove();

  /* 2) build the <table> element                                   */
  const table = document.createElement('table');
  table.id = tableId.substring(1);              // strip leading “#”
  table.innerHTML = `${theadHtml}<tbody></tbody>`;

  /* 3) insert *after* the existing <h2> header (keeps header alive) */
  const header = wrap.querySelector('h2');
  if (header) {
    header.insertAdjacentElement('afterend', table);
  } else {
    /* fallback – shouldn’t happen, but be safe */
    wrap.appendChild(table);
  }
}


    const cash = n => Number(n).toFixed(2);
    const qty  = n => Number(n).toFixed(2);   // NEW – always 2-dp for quantities

    const postJSON = async (url, obj) => {
      const r = await fetch(url, {
        method: 'POST',
      headers: {
  'Content-Type': 'application/json',
  'X-CSRF-Token': "<%= csrfToken %>"
}
,
        body: JSON.stringify(obj)
      });
      const j = await r.json();
      if (!j.success) throw new Error(j.error || 'Unknown error');
      return j;
    };
 /* ──────────────────────────────────────────────────────────────
   refreshSummary – robust label-agnostic updater
   (no regex → always overwrites the number, so *every* figure
    – including Total GST Payable – swaps instantly after any
    add / delete / update action)
   ────────────────────────────────────────────────────────────── */
const refreshSummary = summary => {
  const money = n => Number(n).toFixed(2);

  for (const [key, value] of Object.entries(summary)) {
    const el = document.querySelector(
                `#summaryContent [data-key="${key}"]`
              );
    if (!el) continue;

    if (key === 'totalSales') el.dataset.raw = value;  // keep raw number
    el.textContent = money(value);                     // ← one-shot replace
  }

  /* auto-open the summary so the user sees the fresh totals */
  document.getElementById('summaryContent').style.display = 'block';
  document.getElementById('toggleSummary').textContent    = 'Hide Summary';
};


    /* ── helper: recompute total expense and patch header ── */
function refreshExpenseHeader () {
  const rows  = document.querySelectorAll(
                  '#expenseTable tbody tr td:nth-child(2)'
                );               // column 2 = cost
  const total = Array.from(rows)
                      .reduce((sum, td) => sum + (+td.textContent || 0), 0)
                      .toFixed(2);

  const h2 = document.querySelector('#expenseTable')?.previousElementSibling;
  if (h2)
    h2.innerHTML =
      `Expenses for <%= saleDate %>${rows.length
        ? ` (Expense Amount: ₹${total})`
        : ''}`;
}


     const setLoading = (btn, loading = true) => {
    if (!btn) return;
    if (loading) {
      btn.disabled = true;
      btn.dataset.origHtml = btn.innerHTML;
      btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Please wait…';
    } else {
      btn.disabled = false;
      if (btn.dataset.origHtml) btn.innerHTML = btn.dataset.origHtml;
    }
  };

 /* ——— SALE FORM ——— */
document.getElementById('saleForm').addEventListener('submit', async e => {
  if (e.submitter?.classList.contains('noAjax')) return;   // normal post
  e.preventDefault();

  const submitBtn = e.submitter || e.target.querySelector('button[type="submit"]');
  setLoading(submitBtn, true);   // 🔒 lock while request is in-flight

  try {
    const obj = Object.fromEntries(new FormData(e.target).entries());
    const res = await postJSON('/api/sale', obj);
    const s   = res.sale;

    /* update stock figure in the <select> option */
    const opt = productSelect.querySelector(`option[value="${s.productId}"]`);
    if (opt) {
      const oldQty  = parseFloat(opt.getAttribute('data-quantity')) || 0;
      const soldQty = parseFloat(s.saleQuantity) || 0;
      const newQty  = oldQty - soldQty;
      opt.setAttribute('data-quantity', newQty);
      const label = opt.dataset.originalName || opt.textContent.split(' (Stock:')[0];
      opt.textContent = `${label} (Stock: ${newQty.toFixed(2)})`;
    }

/* build a new row and prepend it */
/* build a new row and prepend it – HTML now escaped */
/* build a new row and prepend it – every dynamic value is escaped */
const row = document.createElement('tr');
const pillClass = {
  'Paid Cash'  : 'status-cash',
  'Paid Online': 'status-online',
  'Not Paid'   : 'status-notpaid'
}[s.status] || 'status-mixed';

row.innerHTML = `
  <td>${escapeHtml(s.productName)}</td>
  <td>${cash(s.wholesalePrice)}</td>
  <td>${cash(s.retailPrice)}</td>
  <td>${qty(s.saleQuantity)}</td>
  <td>${escapeHtml(s.unit || '-')}</td>
  <td>${cash(s.totalSale)}</td>
  <td>${cash(s.profitPerUnit)}</td>
  <td>${cash(s.profit)}</td>
  <td>${s.gstPayable !== undefined ? cash(s.gstPayable) : '-'}</td>
  <td>
    <span class="status-pill ${pillClass}">${escapeHtml(s.status)}</span>
    ${(s.paymentDetail1 || s.paymentDetail2)
        ? `<div class="status-details-inline">
             ${s.paymentDetail1 ? `<span><strong>Detail1:</strong> ₹${cash(s.paymentDetail1)}</span>` : ''}
             ${s.paymentDetail2 ? `<span><strong>Detail2:</strong> ₹${cash(s.paymentDetail2)}</span>` : ''}
           </div>` : ''}
  </td>
  <td>${s.extraInfo ? escapeHtml(s.extraInfo) : '-'}</td>
  <td>${new Date(s.createdAt).toLocaleTimeString('en-IN',
        { hour12:false, timeZone:'Asia/Kolkata' })}</td>
  <td style="text-align:center;">
    <a href="/invoice/${escapeHtml(s.id)}"
       target="_blank" rel="noopener noreferrer" class="print-btn"
       title="Print this line only"><i class="fas fa-receipt"></i></a>&nbsp;
    <a href="/invoice-number/${escapeHtml(s.invoiceNo)}"
       target="_blank" rel="noopener noreferrer"
       title="Print full invoice ${escapeHtml(s.invoiceNo)}"><i class="fas fa-file-invoice"></i></a>&nbsp;
    <i class="fas fa-trash-alt delete-sale-btn"
       data-id="${escapeHtml(s.id)}"
       data-product-id="${escapeHtml(s.productId)}"
       data-quantity="${escapeHtml(s.saleQuantity)}"
       title="Delete sale"></i>
  </td>`;




    /* ensure table exists, then prepend */
  ensureTableExists(
  '.tables-content div:first-child',
  '#salesTable',
  `<thead>
     <tr>
       <th>Product</th><th>Wholesale</th><th>Sale Price</th>
       <th>Qty</th><th>Unit</th><th>Total Sale</th><th>Profit/Unit</th>
       <th>Total Profit</th><th>GST Payable</th><th>Status</th>
       <th>Info</th><th>Time</th><th>Action</th>
     </tr>
   </thead>`
);

    document.querySelector('#salesTable tbody').prepend(row);

    /* refresh UI */
    refreshSummary(res.summary);
    e.target.reset();
    updateSaleCalculations();
    statusSelect.dispatchEvent(new Event('change'));

  } catch (err) {
    alert(err.message);
  } finally {
    setLoading(submitBtn, false);   // 🔓 unlock on success *or* error
  }
});


/* ——— EXPENSE FORM ——— */
document.getElementById('expenseForm').addEventListener('submit', async e => {
  e.preventDefault();

  const submitBtn = e.submitter || e.target.querySelector('button[type="submit"]');
  setLoading(submitBtn, true);

  try {
    /* 1. send the form */
    const obj = Object.fromEntries(new FormData(e.target).entries());
    const res = await postJSON('/api/expense', obj);   // res.expenses ⇢ array

    /* 2. render every row that came back (works for 1-N inserts) */
/* 2. render every row that came back (works for 1-N inserts) */
res.expenses.forEach(ex => {
  /* make sure the expense table exists BEFORE each prepend */
  ensureTableExists(
    '.tables-content div:nth-child(2)',
    '#expenseTable',
  `<thead>
  <tr>
    <th>Expense Reason</th><th>Expense Cost</th><th>Payment Method</th>
    <th>Detail 1</th><th>Detail 2</th><th>Time</th><th>Action</th>
  </tr>
</thead>`
  );

  /* ───────────────────────────────
     Timestamp → IST string (robust)
     ─────────────────────────────── */
/* ───────────────────────────────
   Timestamp → IST string (robust)
   ─────────────────────────────── */
const ts = ex.createdAt;
let d;                                       // final Date object

if (ts instanceof Date) {
  d = ts;                                    // already a Date
} else if (ts && typeof ts === 'object') {
  if ('_seconds' in ts)        d = new Date(ts._seconds * 1000);
  else if ('seconds' in ts)    d = new Date(ts.seconds  * 1000);
  else if (typeof ts.toDate === 'function') d = ts.toDate();
}

if (!d || isNaN(d)) d = new Date(ts);        // fallback

const timeIST = d.toLocaleTimeString('en-IN', {
  hour12  : true,             // ← CHANGED: show “am/pm”
  timeZone: 'Asia/Kolkata'
});


  /* build row and prepend it */
  const row = document.createElement('tr');
row.innerHTML = `
  <td>${escapeHtml(ex.expenseReason)}</td>
  <td>${cash(ex.expenseCost)}</td>
  <td>${escapeHtml(ex.expenseStatus)}</td>
  <td>${ex.expenseDetail1 ? cash(ex.expenseDetail1) : '-'}</td>
  <td>${ex.expenseDetail2 ? cash(ex.expenseDetail2) : '-'}</td>
  <td>${timeIST}</td>
  <td style="text-align:center;">
    <i class="fas fa-trash-alt delete-expense-icon delete-expense-btn"
       data-id="${escapeHtml(ex.id)}"></i>
  </td>`;

  document.querySelector('#expenseTable tbody').prepend(row);
});


    /* 3. housekeeping */
    refreshExpenseHeader();                     // rebuild “Expense Amount: ₹…”
    if (res.summary) refreshSummary(res.summary); // safely refresh when provided

    e.target.reset();                           // clear the form
    expenseStatusSelect.dispatchEvent(new Event('change')); // hide extra fields

  } catch (err) {
    alert(err.message);
  } finally {
    setLoading(submitBtn, false);
  }
});



  /* ——— OPENING BALANCE FORM ——— */
document.getElementById('openingForm').addEventListener('submit', async e => {
  e.preventDefault();

  const submitBtn = e.submitter || e.target.querySelector('button[type="submit"]');
  setLoading(submitBtn, true);

  try {
    const obj = Object.fromEntries(new FormData(e.target).entries());
    const res = await postJSON('/api/opening-balance', obj);

    /* update header balance */
    document.getElementById('salesHeader').innerHTML =
      `Sales for ${obj.saleDate} (Opening Balance: ₹${cash(res.openingBalance)})`;

    /* NEW ▶ refresh time chips without refresh ◀ */
    document.getElementById('openTimeDisplay').textContent  = res.openingTime  || '-';
    document.getElementById('closeTimeDisplay').textContent = res.closingTime || '-';
    document.getElementById('openTimeWrap').style.display   = res.openingTime  ? '' : 'none';
    document.getElementById('closeTimeWrap').style.display  = res.closingTime ? '' : 'none';

    refreshSummary(res.summary);
  } catch (err) {
    alert(err.message);
  } finally {
    setLoading(submitBtn, false);
  }
});



  </script>


<!-- ─── Invoice AJAX helpers (spam-safe) ─── -->
<script>
/* keep current invoice number in JS memory */
let currentInvoiceNo = <%= currentInvoiceNo ? `'${currentInvoiceNo}'` : 'null' %>;

/* one shared flag = true while a request is running */
let invoiceBusy = false;

/* tiny helpers to “disable” <a> elements (anchors don’t support .disabled) */
const lockBtn   = el => { if (el){ el.style.pointerEvents='none'; el.classList.add('btn-lock'); } };
const unlockBtn = el => { if (el){ el.style.pointerEvents='';     el.classList.remove('btn-lock'); } };

async function startInvoice (btn) {
  if (invoiceBusy) return;          // already sending – ignore extra click
  invoiceBusy = true;  lockBtn(btn);
  try {
    const res = await postJSON('/api/invoice/start', {});
    currentInvoiceNo = res.invoiceNo;
    updateInvoiceUI();
  } catch (e) { alert(e.message); }
  finally     { unlockBtn(btn); invoiceBusy = false; }
}

async function finishInvoice (btn) {
  if (invoiceBusy) return;
  invoiceBusy = true;  lockBtn(btn);
  try {
    await postJSON('/api/invoice/finish', {});
    currentInvoiceNo = null;
    updateInvoiceUI();
  } catch (e) { alert(e.message); }
  finally     { unlockBtn(btn); invoiceBusy = false; }
}

/* redraw header + sale form whenever the invoice state flips */
function updateInvoiceUI () {
  const wrap = document.getElementById('invoiceActionWrap');
  if (!wrap) return;

  wrap.innerHTML = currentInvoiceNo
    ? `<span class="current-invoice-label">
         <i class="fas fa-file-invoice"></i>
         Invoice #${escapeHtml(currentInvoiceNo)}
       </span>
       <a href="#" id="finishInvoiceBtn"
          class="invoice-action-btn btn-green ajax-invoice">
         <i class="fas fa-check-circle"></i><span>Finish</span>
       </a>`
    : `<a href="#" id="startInvoiceBtn"
          class="invoice-action-btn btn-blue ajax-invoice">
         <i class="fas fa-file-invoice"></i><span>Start Invoice</span>
       </a>`;

  document.getElementById('invoiceNoDisplay').textContent =
    currentInvoiceNo || '—';
  document.getElementById('invoiceNoHidden').value =
    currentInvoiceNo || '';
}

/* global click-delegate – passes the clicked element to the helper */
document.addEventListener('click', e => {
  const startBtn  = e.target.closest('#startInvoiceBtn');
  const finishBtn = e.target.closest('#finishInvoiceBtn');
  if (startBtn)  { e.preventDefault(); startInvoice(startBtn);  }
  if (finishBtn) { e.preventDefault(); finishInvoice(finishBtn); }
});
</script>

  <!-- convenience fill‑time buttons -->
  <script>
    function getCurrentTimeString() {
      const d = new Date();
      return `${String(d.getHours()).padStart(2,'0')}:${String(d.getMinutes()).padStart(2,'0')}`;
    }
    document.getElementById('fillOpeningTime').onclick = () =>
      (document.getElementById('openingTime').value = getCurrentTimeString());
    document.getElementById('fillClosingTime').onclick = () =>
      (document.getElementById('closingTime').value = getCurrentTimeString());
  </script>
  <!-- optional: restore client-side subscription redirect -->
   <!-- subscription-expired popup trigger -->
  <script>
    const isSubscribed = <%= (user.subscriptionExpiry && subscriptionRemaining > 0) ? 'true' : 'false' %>;
    if (!isSubscribed) {
      // after 5 seconds, show the modal
      setTimeout(() => {
        document.getElementById('subscriptionModal').style.display = 'flex';
      }, 2000);
    }

    // when “Go to Pricing” is clicked, navigate there
    document.addEventListener('DOMContentLoaded', () => {
      const btn = document.getElementById('renewBtn');
      if (btn) {
        btn.addEventListener('click', () => window.location.href = '/pricing');
      }
    });
  </script>

  <script src="/js/firebasePersistence.js?v=<%= v %>" type="module"></script>

  <script>
    // Mobile menu functionality
document.addEventListener('DOMContentLoaded', () => {
  const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
  const navLinks = document.querySelector('.nav-links');
  
  if (mobileMenuBtn) {
    mobileMenuBtn.addEventListener('click', () => {
      navLinks.classList.toggle('active');
      
      // Change icon based on menu state
      const icon = mobileMenuBtn.querySelector('i');
      if (navLinks.classList.contains('active')) {
        icon.classList.remove('fa-bars');
        icon.classList.add('fa-times');
      } else {
        icon.classList.remove('fa-times');
        icon.classList.add('fa-bars');
      }
    });
  }
  
  // Close menu when clicking outside
  document.addEventListener('click', (e) => {
    if (navLinks && navLinks.classList.contains('active') && 
        !e.target.closest('.nav-links') && 
        !e.target.closest('.mobile-menu-btn')) {
      navLinks.classList.remove('active');
      const icon = mobileMenuBtn.querySelector('i');
      icon.classList.remove('fa-times');
      icon.classList.add('fa-bars');
    }
  });
});
  </script>


    <!-- subscription expired modal -->
  <div id="subscriptionModal" class="modal-overlay" style="display:none;">
    <div class="modal-content">
      <h2>Subscription Expired</h2>
      <p>Your free trial or subscription has ended. To continue using SalesFlow, please renew below.</p>
      <button id="renewBtn">Go to Pricing</button>
    </div>
  </div>



</body>

</html>


